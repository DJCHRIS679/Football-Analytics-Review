{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "62aca769",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T03:08:38.486935Z",
     "iopub.status.busy": "2024-04-26T03:08:38.486125Z",
     "iopub.status.idle": "2024-04-26T03:08:56.077252Z",
     "shell.execute_reply": "2024-04-26T03:08:56.075687Z"
    },
    "papermill": {
     "duration": 17.60163,
     "end_time": "2024-04-26T03:08:56.080027",
     "exception": false,
     "start_time": "2024-04-26T03:08:38.478397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting nfl_data_py\r\n",
      "  Downloading nfl_data_py-0.3.1.tar.gz (16 kB)\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25hRequirement already satisfied: pandas>1 in /opt/conda/lib/python3.10/site-packages (from nfl_data_py) (2.2.2)\r\n",
      "Requirement already satisfied: appdirs>1 in /opt/conda/lib/python3.10/site-packages (from nfl_data_py) (1.4.4)\r\n",
      "Collecting fastparquet>0.5 (from nfl_data_py)\r\n",
      "  Downloading fastparquet-2024.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.1 kB)\r\n",
      "Collecting python-snappy>0.5 (from nfl_data_py)\r\n",
      "  Downloading python_snappy-0.7.1-py3-none-any.whl.metadata (1.3 kB)\r\n",
      "Requirement already satisfied: numpy>=1.20.3 in /opt/conda/lib/python3.10/site-packages (from fastparquet>0.5->nfl_data_py) (1.26.4)\r\n",
      "Collecting cramjam>=2.3 (from fastparquet>0.5->nfl_data_py)\r\n",
      "  Downloading cramjam-2.8.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.2 kB)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from fastparquet>0.5->nfl_data_py) (2024.2.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from fastparquet>0.5->nfl_data_py) (21.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas>1->nfl_data_py) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas>1->nfl_data_py) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>1->nfl_data_py) (2023.4)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas>1->nfl_data_py) (1.16.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->fastparquet>0.5->nfl_data_py) (3.1.1)\r\n",
      "Downloading fastparquet-2024.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m19.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading python_snappy-0.7.1-py3-none-any.whl (8.6 kB)\r\n",
      "Downloading cramjam-2.8.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m51.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hBuilding wheels for collected packages: nfl_data_py\r\n",
      "  Building wheel for nfl_data_py (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25h  Created wheel for nfl_data_py: filename=nfl_data_py-0.3.1-py3-none-any.whl size=13182 sha256=d33de483df229136a788979c8c187aac8dc916a78c9c11d68aaaeeabbcbf21cd\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/ca/2e/d2/4def312ac7c070e1c0002e91ecc6923481a86c3ebd5b2c5413\r\n",
      "Successfully built nfl_data_py\r\n",
      "Installing collected packages: cramjam, python-snappy, fastparquet, nfl_data_py\r\n",
      "Successfully installed cramjam-2.8.3 fastparquet-2024.2.0 nfl_data_py-0.3.1 python-snappy-0.7.1\r\n"
     ]
    }
   ],
   "source": [
    "!pip install nfl_data_py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6c143160",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-26T03:08:56.092000Z",
     "iopub.status.busy": "2024-04-26T03:08:56.091448Z",
     "iopub.status.idle": "2024-04-26T03:08:57.171840Z",
     "shell.execute_reply": "2024-04-26T03:08:57.170536Z"
    },
    "papermill": {
     "duration": 1.089686,
     "end_time": "2024-04-26T03:08:57.174840",
     "exception": false,
     "start_time": "2024-04-26T03:08:56.085154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import nfl_data_py as nfl\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0b50139f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T03:08:57.185519Z",
     "iopub.status.busy": "2024-04-26T03:08:57.184867Z",
     "iopub.status.idle": "2024-04-26T03:08:59.746786Z",
     "shell.execute_reply": "2024-04-26T03:08:59.745472Z"
    },
    "papermill": {
     "duration": 2.570339,
     "end_time": "2024-04-26T03:08:59.749490",
     "exception": false,
     "start_time": "2024-04-26T03:08:57.179151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2021 done.\n",
      "Downcasting floats.\n"
     ]
    }
   ],
   "source": [
    "pbp_py = nfl.import_pbp_data([2021])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b11ca579",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T03:08:59.761112Z",
     "iopub.status.busy": "2024-04-26T03:08:59.760043Z",
     "iopub.status.idle": "2024-04-26T03:08:59.765754Z",
     "shell.execute_reply": "2024-04-26T03:08:59.764743Z"
    },
    "papermill": {
     "duration": 0.013736,
     "end_time": "2024-04-26T03:08:59.767960",
     "exception": false,
     "start_time": "2024-04-26T03:08:59.754224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "filter_crit = 'play_type == \"pass\" & air_yards.notnull()'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "07ed0689",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T03:08:59.778664Z",
     "iopub.status.busy": "2024-04-26T03:08:59.778229Z",
     "iopub.status.idle": "2024-04-26T03:09:00.142442Z",
     "shell.execute_reply": "2024-04-26T03:09:00.141128Z"
    },
    "papermill": {
     "duration": 0.373266,
     "end_time": "2024-04-26T03:09:00.145628",
     "exception": false,
     "start_time": "2024-04-26T03:08:59.772362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p =(pbp_py.query(filter_crit)\n",
    "           .groupby(['passer_id', 'passer'])\n",
    "           .agg({'air_yards':['count', 'mean']})\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fb8cc1d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T03:09:00.156584Z",
     "iopub.status.busy": "2024-04-26T03:09:00.156134Z",
     "iopub.status.idle": "2024-04-26T03:09:00.175226Z",
     "shell.execute_reply": "2024-04-26T03:09:00.173965Z"
    },
    "papermill": {
     "duration": 0.02762,
     "end_time": "2024-04-26T03:09:00.177812",
     "exception": false,
     "start_time": "2024-04-26T03:09:00.150192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             air_yards_count  air_yards_mean\n",
      "passer_id  passer                                           \n",
      "00-0035704 D.Lock                        110       10.154546\n",
      "00-0029263 R.Wilson                      400        9.887500\n",
      "00-0036945 J.Fields                      268        9.835821\n",
      "00-0034796 L.Jackson                     378        9.341269\n",
      "00-0036389 J.Hurts                       473        9.190275\n",
      "00-0034855 B.Mayfield                    416        8.776443\n",
      "00-0026498 M.Stafford                    740        8.508108\n",
      "00-0031503 J.Winston                     161        8.322982\n",
      "00-0029604 K.Cousins                     556        8.228417\n",
      "00-0034857 J.Allen                       708        8.224576\n",
      "00-0031280 D.Carr                        676        8.128698\n",
      "00-0031237 T.Bridgewater                 426        8.037559\n",
      "00-0019596 T.Brady                       808        7.941832\n",
      "00-0035228 K.Murray                      515        7.941748\n",
      "00-0036971 T.Lawrence                    598        7.913043\n",
      "00-0036972 M.Jones                       557        7.901257\n",
      "00-0033077 D.Prescott                    638        7.811912\n",
      "00-0036442 J.Burrow                      659        7.745068\n",
      "00-0023459 A.Rodgers                     556        7.730216\n",
      "00-0031800 T.Heinicke                    491        7.692464\n",
      "00-0035993 T.Huntley                     185        7.675676\n",
      "00-0032950 C.Wentz                       516        7.641473\n",
      "00-0029701 R.Tannehill                   554        7.606498\n",
      "00-0037013 Z.Wilson                      382        7.565445\n",
      "00-0036355 J.Herbert                     671        7.554397\n",
      "00-0033119 J.Brissett                    224        7.549107\n",
      "00-0033357 T.Hill                        132        7.439394\n",
      "00-0028118 T.Taylor                      149        7.429530\n",
      "00-0030520 M.Glennon                     164        7.378049\n",
      "00-0035710 D.Jones                       360        7.344444\n",
      "00-0036898 D.Mills                       392        7.318878\n",
      "00-0031345 J.Garoppolo                   511        7.305284\n",
      "00-0034869 S.Darnold                     405        7.259259\n",
      "00-0026143 M.Ryan                        559        7.159213\n",
      "00-0032156 T.Siemian                     187        7.133690\n",
      "00-0036212 T.Tagovailoa                  387        7.103359\n",
      "00-0033873 P.Mahomes                     780        7.075641\n",
      "00-0027973 A.Dalton                      235        6.987234\n",
      "00-0027939 C.Newton                      126        6.968254\n",
      "00-0022924 B.Roethlisberger              647        6.761978\n",
      "00-0033106 J.Goff                        489        6.441718\n",
      "00-0034401 M.White                       132        5.886364\n"
     ]
    }
   ],
   "source": [
    "pbp_py_p.columns = list(map(\"_\".join,pbp_py_p.columns.values))\n",
    "sort_crit = \"air_yards_count > 100\"\n",
    "print(pbp_py_p.query(sort_crit).sort_values(by='air_yards_mean', ascending=[False]).to_string())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d54ae8b",
   "metadata": {
    "papermill": {
     "duration": 0.00407,
     "end_time": "2024-04-26T03:09:00.186492",
     "exception": false,
     "start_time": "2024-04-26T03:09:00.182422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 28.182664,
   "end_time": "2024-04-26T03:09:03.641557",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-26T03:08:35.458893",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
