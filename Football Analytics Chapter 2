{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3cb88110",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:40:17.968257Z",
     "iopub.status.busy": "2024-04-26T04:40:17.967836Z",
     "iopub.status.idle": "2024-04-26T04:40:38.800979Z",
     "shell.execute_reply": "2024-04-26T04:40:38.799440Z"
    },
    "papermill": {
     "duration": 20.845322,
     "end_time": "2024-04-26T04:40:38.804143",
     "exception": false,
     "start_time": "2024-04-26T04:40:17.958821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting nfl_data_py\r\n",
      "  Downloading nfl_data_py-0.3.1.tar.gz (16 kB)\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25hRequirement already satisfied: pandas>1 in /opt/conda/lib/python3.10/site-packages (from nfl_data_py) (2.2.2)\r\n",
      "Requirement already satisfied: appdirs>1 in /opt/conda/lib/python3.10/site-packages (from nfl_data_py) (1.4.4)\r\n",
      "Collecting fastparquet>0.5 (from nfl_data_py)\r\n",
      "  Downloading fastparquet-2024.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.1 kB)\r\n",
      "Collecting python-snappy>0.5 (from nfl_data_py)\r\n",
      "  Downloading python_snappy-0.7.1-py3-none-any.whl.metadata (1.3 kB)\r\n",
      "Requirement already satisfied: numpy>=1.20.3 in /opt/conda/lib/python3.10/site-packages (from fastparquet>0.5->nfl_data_py) (1.26.4)\r\n",
      "Collecting cramjam>=2.3 (from fastparquet>0.5->nfl_data_py)\r\n",
      "  Downloading cramjam-2.8.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.2 kB)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from fastparquet>0.5->nfl_data_py) (2024.2.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from fastparquet>0.5->nfl_data_py) (21.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas>1->nfl_data_py) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas>1->nfl_data_py) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>1->nfl_data_py) (2023.4)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas>1->nfl_data_py) (1.16.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->fastparquet>0.5->nfl_data_py) (3.1.1)\r\n",
      "Downloading fastparquet-2024.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m24.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading python_snappy-0.7.1-py3-none-any.whl (8.6 kB)\r\n",
      "Downloading cramjam-2.8.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m48.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hBuilding wheels for collected packages: nfl_data_py\r\n",
      "  Building wheel for nfl_data_py (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25h  Created wheel for nfl_data_py: filename=nfl_data_py-0.3.1-py3-none-any.whl size=13182 sha256=4c4f0a97f830f6c7fa1637e29ed3a5d4ce64821def4c0f6c75cf8528a7fe5401\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/ca/2e/d2/4def312ac7c070e1c0002e91ecc6923481a86c3ebd5b2c5413\r\n",
      "Successfully built nfl_data_py\r\n",
      "Installing collected packages: cramjam, python-snappy, fastparquet, nfl_data_py\r\n",
      "Successfully installed cramjam-2.8.3 fastparquet-2024.2.0 nfl_data_py-0.3.1 python-snappy-0.7.1\r\n"
     ]
    }
   ],
   "source": [
    "!pip install nfl_data_py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c5b6fa12",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-26T04:40:38.824427Z",
     "iopub.status.busy": "2024-04-26T04:40:38.823900Z",
     "iopub.status.idle": "2024-04-26T04:40:39.863115Z",
     "shell.execute_reply": "2024-04-26T04:40:39.861485Z"
    },
    "papermill": {
     "duration": 1.052896,
     "end_time": "2024-04-26T04:40:39.866078",
     "exception": false,
     "start_time": "2024-04-26T04:40:38.813182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import nfl_data_py as nfl\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cd32f57d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:40:39.885570Z",
     "iopub.status.busy": "2024-04-26T04:40:39.884744Z",
     "iopub.status.idle": "2024-04-26T04:41:02.415150Z",
     "shell.execute_reply": "2024-04-26T04:41:02.413742Z"
    },
    "papermill": {
     "duration": 22.543673,
     "end_time": "2024-04-26T04:41:02.418561",
     "exception": false,
     "start_time": "2024-04-26T04:40:39.874888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2016 done.\n",
      "2017 done.\n",
      "2018 done.\n",
      "2019 done.\n",
      "2020 done.\n",
      "2021 done.\n",
      "2022 done.\n",
      "Downcasting floats.\n"
     ]
    }
   ],
   "source": [
    "seasons = range (2016, 2022+1)\n",
    "pbp_py = nfl.import_pbp_data(seasons)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c977397c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:02.439360Z",
     "iopub.status.busy": "2024-04-26T04:41:02.438857Z",
     "iopub.status.idle": "2024-04-26T04:41:03.530078Z",
     "shell.execute_reply": "2024-04-26T04:41:03.528576Z"
    },
    "papermill": {
     "duration": 1.105016,
     "end_time": "2024-04-26T04:41:03.533154",
     "exception": false,
     "start_time": "2024-04-26T04:41:02.428138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p = pbp_py.query(\"play_type == 'pass' & air_yards.notnull()\").reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9885b2ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:03.554048Z",
     "iopub.status.busy": "2024-04-26T04:41:03.553606Z",
     "iopub.status.idle": "2024-04-26T04:41:03.578661Z",
     "shell.execute_reply": "2024-04-26T04:41:03.577515Z"
    },
    "papermill": {
     "duration": 0.039448,
     "end_time": "2024-04-26T04:41:03.582029",
     "exception": false,
     "start_time": "2024-04-26T04:41:03.542581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p['pass_length_air_yards'] = np.where(pbp_py_p['air_yards'] >= 20, \"long\", \"short\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3253ac88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:03.603448Z",
     "iopub.status.busy": "2024-04-26T04:41:03.602955Z",
     "iopub.status.idle": "2024-04-26T04:41:03.611756Z",
     "shell.execute_reply": "2024-04-26T04:41:03.610322Z"
    },
    "papermill": {
     "duration": 0.023308,
     "end_time": "2024-04-26T04:41:03.614695",
     "exception": false,
     "start_time": "2024-04-26T04:41:03.591387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p['passing_yards'] = np.where(pbp_py_p['passing_yards'].isnull(), 0, pbp_py_p['passing_yards'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3d6cdd18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:03.635574Z",
     "iopub.status.busy": "2024-04-26T04:41:03.635124Z",
     "iopub.status.idle": "2024-04-26T04:41:03.658631Z",
     "shell.execute_reply": "2024-04-26T04:41:03.657382Z"
    },
    "papermill": {
     "duration": 0.037156,
     "end_time": "2024-04-26T04:41:03.661404",
     "exception": false,
     "start_time": "2024-04-26T04:41:03.624248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    131606.000000\n",
       "mean          7.191807\n",
       "std           9.666765\n",
       "min         -20.000000\n",
       "25%           0.000000\n",
       "50%           5.000000\n",
       "75%          11.000000\n",
       "max          98.000000\n",
       "Name: passing_yards, dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p['passing_yards'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5a3871df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:03.682412Z",
     "iopub.status.busy": "2024-04-26T04:41:03.681969Z",
     "iopub.status.idle": "2024-04-26T04:41:04.194501Z",
     "shell.execute_reply": "2024-04-26T04:41:04.193260Z"
    },
    "papermill": {
     "duration": 0.526548,
     "end_time": "2024-04-26T04:41:04.197341",
     "exception": false,
     "start_time": "2024-04-26T04:41:03.670793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    116085.000000\n",
       "mean          6.525623\n",
       "std           7.695175\n",
       "min         -20.000000\n",
       "25%           0.000000\n",
       "50%           5.000000\n",
       "75%          10.000000\n",
       "max          95.000000\n",
       "Name: passing_yards, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p.query('pass_length_air_yards == \"short\"')['passing_yards'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7846d595",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:04.219954Z",
     "iopub.status.busy": "2024-04-26T04:41:04.218380Z",
     "iopub.status.idle": "2024-04-26T04:41:04.424011Z",
     "shell.execute_reply": "2024-04-26T04:41:04.422622Z"
    },
    "papermill": {
     "duration": 0.219733,
     "end_time": "2024-04-26T04:41:04.426852",
     "exception": false,
     "start_time": "2024-04-26T04:41:04.207119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    15521.000000\n",
       "mean        12.174344\n",
       "std         17.925913\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%         26.000000\n",
       "max         98.000000\n",
       "Name: passing_yards, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p.query('pass_length_air_yards == \"long\"')[\"passing_yards\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "917c1f99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:04.449607Z",
     "iopub.status.busy": "2024-04-26T04:41:04.449207Z",
     "iopub.status.idle": "2024-04-26T04:41:04.913389Z",
     "shell.execute_reply": "2024-04-26T04:41:04.912003Z"
    },
    "papermill": {
     "duration": 0.478064,
     "end_time": "2024-04-26T04:41:04.916237",
     "exception": false,
     "start_time": "2024-04-26T04:41:04.438173",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    116084.000000\n",
       "mean          0.119577\n",
       "std           1.426167\n",
       "min         -13.031219\n",
       "25%          -0.606107\n",
       "50%          -0.002116\n",
       "75%           0.959070\n",
       "max           8.241420\n",
       "Name: epa, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p.query('pass_length_air_yards == \"short\"')['epa'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "27779812",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:04.939518Z",
     "iopub.status.busy": "2024-04-26T04:41:04.938097Z",
     "iopub.status.idle": "2024-04-26T04:41:05.117551Z",
     "shell.execute_reply": "2024-04-26T04:41:05.116260Z"
    },
    "papermill": {
     "duration": 0.1936,
     "end_time": "2024-04-26T04:41:05.120397",
     "exception": false,
     "start_time": "2024-04-26T04:41:04.926797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    15521.000000\n",
       "mean         0.382539\n",
       "std          2.186034\n",
       "min        -10.477921\n",
       "25%         -0.827517\n",
       "50%         -0.465127\n",
       "75%          2.136195\n",
       "max          8.789743\n",
       "Name: epa, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p.query('pass_length_air_yards== \"long\"')['epa'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "826392af",
   "metadata": {
    "papermill": {
     "duration": 0.010039,
     "end_time": "2024-04-26T04:41:05.141276",
     "exception": false,
     "start_time": "2024-04-26T04:41:05.131237",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<h3>Plotting Data</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bc90e687",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:05.164789Z",
     "iopub.status.busy": "2024-04-26T04:41:05.164321Z",
     "iopub.status.idle": "2024-04-26T04:41:06.752132Z",
     "shell.execute_reply": "2024-04-26T04:41:06.750827Z"
    },
    "papermill": {
     "duration": 1.603528,
     "end_time": "2024-04-26T04:41:06.755441",
     "exception": false,
     "start_time": "2024-04-26T04:41:05.151913",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8216686c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:06.778122Z",
     "iopub.status.busy": "2024-04-26T04:41:06.777713Z",
     "iopub.status.idle": "2024-04-26T04:41:08.703438Z",
     "shell.execute_reply": "2024-04-26T04:41:08.702215Z"
    },
    "papermill": {
     "duration": 1.940608,
     "end_time": "2024-04-26T04:41:08.706737",
     "exception": false,
     "start_time": "2024-04-26T04:41:06.766129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "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qitVUBcUFEiSwsLCdODAAdWvX/+ONAXcLYZhyG63Kzg4WF5eXp5uBwBuUKZj1JmZmYQ0KgW73a7+s9fJbrd7uhUAKFKptqgLS05OVnJysnJycswtbZd33333thsD7hZv/wBPtwAAN1WmoP7f//1fTZ06VZGRkWrUqBG7DAEAuEPKFNRLlixRYmKiBgwYUN79AACAQsp0jDo/P18PPvhgefcCAACuU6agHjx4sFauXFnevQAAgOuUadf35cuXtXTpUm3fvl3t2rWTt7e32/I5c+aUS3MAAFR1ZQrqw4cPq0OHDpKko0ePui3jxDIAAMpPmYL6k08+Ke8+AABAEXjMJQAAFlamLeru3bsXu4s7JSWlzA0BAID/KlNQu45Pu1y5ckXp6ek6evToDQ/rAAAAZVemoJ47d26R86dMmaKLFy/eVkMAAOC/yvUY9XPPPcd9vgEAKEflGtSpqany8/Mrz1UCAFCllWnXd9++fd1eG4ah7777TgcPHtSkSZPKpTEAAFDGoA4KCnJ7Xa1aNbVu3VpTp05Vr169yqUxAABQxqBetmxZefcBAACKUKagdklLS9OXX34pSbr33nvVsWPHcmkKAAD8qExBnZOTo/79+2vHjh0KDg6WJNntdnXv3l2rVq1SgwYNyrNHAACqrDKd9T1y5EhduHBBx44d0/nz53X+/HkdPXpUTqdTL730Unn3CABAlVWmLeotW7Zo+/btCg8PN+dFREQoISGBk8kAAChHZdqiLigouOEZ1JLk7e2tgoKC224KAAD8qExB3aNHD40aNUrnzp0z5509e1ZjxoxRz549y605AACqujIF9RtvvCGn06kWLVropz/9qX76058qLCxMTqdTCxcuLO8eAQCossoU1E2bNtXnn3+ujRs3avTo0Ro9erQ2bdqkzz//XE2aNCnxehYvXqx27dopMDBQgYGBstls2rx5s7n88uXLio+PV7169RQQEKB+/fopOzvbbR2nT59WTEyMatasqYYNG+rll1/W1atX3Wp27NihTp06ydfXVy1btlRiYmJZhg0AwF1XqqBOSUlRRESEnE6nvLy89Nhjj2nkyJEaOXKk7r//ft1777369NNPS7y+Jk2aaMaMGUpLS9PBgwfVo0cPPfXUUzp27JgkacyYMfr444+1Zs0a7dy5U+fOnXO7fem1a9cUExOj/Px87dmzR8uXL1diYqImT55s1mRmZiomJkbdu3dXenq6Ro8ercGDB2vr1q2lGToAAB5RqrO+582bpyFDhigwMPCGZUFBQfrd736nOXPm6JFHHinR+p588km316+99poWL16svXv3qkmTJnrnnXe0cuVK9ejRQ9KPd0QLDw/X3r171bVrV23btk3Hjx/X9u3bFRISog4dOmjatGkaP368pkyZIh8fHy1ZskRhYWGaPXu2JCk8PFy7d+/W3LlzFR0dXZrhAwBw15Vqi/qLL77Q448/ftPlvXr1UlpaWpkauXbtmlatWqUffvhBNptNaWlpunLliqKiosyaNm3aqFmzZkpNTZX049O62rZtq5CQELMmOjpaTqfT3CpPTU11W4erxrWOouTl5cnpdLpNAAB4QqmCOjs7u8jLslxq1Kihf//736Vq4MiRIwoICJCvr6+GDRumtWvXKiIiQllZWfLx8THvfOYSEhKirKwsSVJWVpZbSLuWu5YVV+N0OnXp0qUie5o+fbqCgoLMqWnTpqUaEwAA5aVUQf2Tn/xER48evenyw4cPq1GjRqVqoHXr1kpPT9e+ffs0fPhwxcXF6fjx46VaR3mbMGGCHA6HOZ05c8aj/eDOMwxDubm5MgzD060AgJtSBfUTTzyhSZMm6fLlyzcsu3Tpkl599VX94he/KFUDPj4+atmypTp37qzp06erffv2mj9/vkJDQ5Wfny+73e5Wn52drdDQUElSaGjoDWeBu17fqiYwMFD+/v5F9uTr62ueie6acGdYJSAdDof6z153w783APC0UgX1xIkTdf78ef3sZz/TzJkztW7dOq1bt06vv/66WrdurfPnz+uVV165rYYKCgqUl5enzp07y9vbW8nJyeayjIwMnT59WjabTZJks9l05MgR5eTkmDVJSUkKDAxURESEWVN4Ha4a1zrgWXa73TIB6e0f4OkWAOAGpTrrOyQkRHv27NHw4cM1YcIEcyvIy8tL0dHRSkhIuOF4cHEmTJig3r17q1mzZrpw4YJWrlypHTt2aOvWrQoKCtKgQYM0duxY1a1bV4GBgRo5cqRsNpu6du0q6ceT1yIiIjRgwADNnDlTWVlZmjhxouLj4+Xr6ytJGjZsmN544w2NGzdOL774olJSUrR69Wpt3LixNEPHHURAAsDNlfqhHM2bN9emTZuUm5urkydPyjAMtWrVSnXq1Cn1h+fk5Oj5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ynIbe1BQkLp06VKhx/7ggw8qOTlZX3/9tSTpiy++0O7du9W7d29JlXfc1yvJOFNTUxUcHKzIyEizJioqStWqVdO+fftK/FlV5s5kVnPy5EktXLhQs2bNMudlZWUpLCzMrc5157SsrKxyfQbq3fJ///d/unbt2g13gAsJCdFXX33loa7urIKCAo0ePVoPPfSQ7rvvPkk//v35+Pjc8HCXkJAQZWVleaDL8rNq1Sp9/vnnOnDgwA3LKvO4v/nmGy1evFhjx47V//zP/+jAgQN66aWX5OPjo7i4OHN8Rf3br8hj/9Of/iSn06k2bdqoevXqunbtml577TXFxsZKUqUd9/VKMs6srCw1bNjQbXmNGjVUt27dUn0XbFHfpj/96U/y8vIqdro+kM6ePavHH39cv/nNbzRkyBAPdY47JT4+XkePHtWqVas83codd+bMGY0aNUorVqyQn5+fp9u5qwoKCtSpUyf95S9/UceOHTV06FANGTJES5Ys8XRrd9Tq1au1YsUKrVy5Up9//rmWL1+uWbNmafny5Z5urdJii/o2/eEPf9DAgQOLrbnnnnvMP587d07du3fXgw8+qKVLl7rVhYaGFvkoTteyiqi0jxit6EaMGKENGzZo165datKkiTk/NDRU+fn5stvtbluXFf17SEtLU05Ojjp16mTOu3btmnbt2qU33nhDW7durZTjlqRGjRopIiLCbV54eLj+8Y9/SPrv/9ns7Gw1atTIrMnOzlaHDh3uWp/l7eWXX9af/vQn9e/fX5LUtm1bffvtt5o+fbri4uIq7bivV5JxhoaGKicnx+19V69e1fnz50v1758t6tvUoEEDtWnTptjJdcz57Nmz6tatmzp37qxly5apWjX3r99ms2nXrl26cuWKOS8pKUmtW7eukLu9parziFHDMDRixAitXbtWKSkpNxzC6Ny5s7y9vd2+h4yMDJ0+fbpCfw89e/bUkSNHlJ6ebk6RkZGKjY01/1wZxy1JDz300A2X4H399ddq3ry5JCksLEyhoaFuY3c6ndq3b1+FHvt//vOfG352Va9eXQUFBZIq77ivV5Jx2mw22e12paWlmTUpKSkqKChQly5dSv5ht30qHErkX//6l9GyZUujZ8+exr/+9S/ju+++MycXu91uhISEGAMGDDCOHj1qrFq1yqhZs2aluDzL19fXSExMNI4fP24MHTrU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9t7Jkydr3bp1OnnypI4dO6YNGzYoPDxckjRnzhy9//77+uqrr/T1119rzZo1Cg0NLdFZ2kUZOXKkNm3apDlz5ujEiRN68803tXnzZrfd9rcSHh6url27avz48XrmmWfk7+9vLmvVqpUOHjyorVu36uuvv9akSZNK9IvAs88+Ky8vLw0ZMkTHjx/Xpk2bNGvWLLea4r4nwEoIasCCnn/+eV26dEkPPPCA4uPjNWrUKA0dOlQNGjRQYmKi1qxZo4iICM2YMeOGAPLx8dGECRPUrl07Pfroo6pevbpWrVolSapdu7ZmzpypyMhI3X///Tp16pQ2bdqkatXK9qPgoYce0pIlSzRnzhy1b99eW7Zs0ZgxY9yODZfEoEGDlJ+f77bbW5J+97vfqW/fvnr66afVpUsXff/99/r9739/y/UFBATo448/1pEjR9SxY0e98sorev31191qivueACvxMoz/f3EmAEvo1q2bOnTooHnz5nm6lTIZMmSIvvrqK3366aclfs+0adO0Zs0aHT58+A52BlRMXEcN4LbMmjVLjz32mGrVqqXNmzdr+fLlWrRoUYnee/HiRZ06dUpvvPGG/vznP9/hToGKiaAGcFv279+vmTNn6sKFC7rnnnu0YMECDR48WJJ077336ttvvy3yfW+++aaSkpL0/vvvq0+fPjfs9gbwI3Z9A7hjvv32W125cqXIZSEhIapdu/Zd7gioeAhqAAAsjLO+AQCwMIIaAAALI6gBALAwghoAAAsjqAEAsDCCGgAACyOoAQCwsP8HLEhT4d13mxEAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data=pbp_py, x='passing_yards')\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8c4b7ccd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:08.731407Z",
     "iopub.status.busy": "2024-04-26T04:41:08.730973Z",
     "iopub.status.idle": "2024-04-26T04:41:08.737771Z",
     "shell.execute_reply": "2024-04-26T04:41:08.736368Z"
    },
    "papermill": {
     "duration": 0.022065,
     "end_time": "2024-04-26T04:41:08.740462",
     "exception": false,
     "start_time": "2024-04-26T04:41:08.718397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sns.set_theme(style='whitegrid', palette='colorblind')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "34e10629",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:08.764918Z",
     "iopub.status.busy": "2024-04-26T04:41:08.764514Z",
     "iopub.status.idle": "2024-04-26T04:41:09.134627Z",
     "shell.execute_reply": "2024-04-26T04:41:09.133183Z"
    },
    "papermill": {
     "duration": 0.386495,
     "end_time": "2024-04-26T04:41:09.137858",
     "exception": false,
     "start_time": "2024-04-26T04:41:08.751363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_short = pbp_py_p.query('pass_length_air_yards == \"short\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b97e4da8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T04:41:09.161556Z",
     "iopub.status.busy": "2024-04-26T04:41:09.161156Z",
     "iopub.status.idle": "2024-04-26T04:41:11.148169Z",
     "shell.execute_reply": "2024-04-26T04:41:11.146956Z"
    },
    "papermill": {
     "duration": 2.002046,
     "end_time": "2024-04-26T04:41:11.150697",
     "exception": false,
     "start_time": "2024-04-26T04:41:09.148651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pbp_py_hist_short = sns.displot(data=pbp_py_p_short, binwidth=1, x='passing_yards');\n",
    "pbp_py_hist_short.set_axis_labels(\"Yards gained (or lost) during a passing play\", 'Count');\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91b9781f",
   "metadata": {
    "papermill": {
     "duration": 0.011044,
     "end_time": "2024-04-26T04:41:11.173373",
     "exception": false,
     "start_time": "2024-04-26T04:41:11.162329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 58.216093,
   "end_time": "2024-04-26T04:41:12.915545",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-26T04:40:14.699452",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
