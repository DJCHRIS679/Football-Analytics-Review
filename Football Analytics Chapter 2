{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "75c6fcea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:16:35.813746Z",
     "iopub.status.busy": "2024-04-28T20:16:35.812739Z",
     "iopub.status.idle": "2024-04-28T20:16:58.236677Z",
     "shell.execute_reply": "2024-04-28T20:16:58.235097Z"
    },
    "papermill": {
     "duration": 22.444463,
     "end_time": "2024-04-28T20:16:58.240099",
     "exception": false,
     "start_time": "2024-04-28T20:16:35.795636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting nfl_data_py\r\n",
      "  Downloading nfl_data_py-0.3.1.tar.gz (16 kB)\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25hRequirement already satisfied: pandas>1 in /opt/conda/lib/python3.10/site-packages (from nfl_data_py) (2.2.2)\r\n",
      "Requirement already satisfied: appdirs>1 in /opt/conda/lib/python3.10/site-packages (from nfl_data_py) (1.4.4)\r\n",
      "Collecting fastparquet>0.5 (from nfl_data_py)\r\n",
      "  Downloading fastparquet-2024.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.1 kB)\r\n",
      "Collecting python-snappy>0.5 (from nfl_data_py)\r\n",
      "  Downloading python_snappy-0.7.1-py3-none-any.whl.metadata (1.3 kB)\r\n",
      "Requirement already satisfied: numpy>=1.20.3 in /opt/conda/lib/python3.10/site-packages (from fastparquet>0.5->nfl_data_py) (1.26.4)\r\n",
      "Collecting cramjam>=2.3 (from fastparquet>0.5->nfl_data_py)\r\n",
      "  Downloading cramjam-2.8.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.2 kB)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from fastparquet>0.5->nfl_data_py) (2024.2.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from fastparquet>0.5->nfl_data_py) (21.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas>1->nfl_data_py) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas>1->nfl_data_py) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>1->nfl_data_py) (2023.4)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas>1->nfl_data_py) (1.16.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->fastparquet>0.5->nfl_data_py) (3.1.1)\r\n",
      "Downloading fastparquet-2024.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m25.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading python_snappy-0.7.1-py3-none-any.whl (8.6 kB)\r\n",
      "Downloading cramjam-2.8.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m29.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hBuilding wheels for collected packages: nfl_data_py\r\n",
      "  Building wheel for nfl_data_py (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25h  Created wheel for nfl_data_py: filename=nfl_data_py-0.3.1-py3-none-any.whl size=13182 sha256=549d20556f5359692b1f7f96e31fcc3d5ce0b6e5956521b45832db7836cfa847\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/ca/2e/d2/4def312ac7c070e1c0002e91ecc6923481a86c3ebd5b2c5413\r\n",
      "Successfully built nfl_data_py\r\n",
      "Installing collected packages: cramjam, python-snappy, fastparquet, nfl_data_py\r\n",
      "Successfully installed cramjam-2.8.3 fastparquet-2024.2.0 nfl_data_py-0.3.1 python-snappy-0.7.1\r\n"
     ]
    }
   ],
   "source": [
    "!pip install nfl_data_py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3e4e631a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-28T20:16:58.278054Z",
     "iopub.status.busy": "2024-04-28T20:16:58.277578Z",
     "iopub.status.idle": "2024-04-28T20:16:59.422154Z",
     "shell.execute_reply": "2024-04-28T20:16:59.420698Z"
    },
    "papermill": {
     "duration": 1.167455,
     "end_time": "2024-04-28T20:16:59.425307",
     "exception": false,
     "start_time": "2024-04-28T20:16:58.257852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import nfl_data_py as nfl\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c06c65c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:16:59.459249Z",
     "iopub.status.busy": "2024-04-28T20:16:59.458280Z",
     "iopub.status.idle": "2024-04-28T20:17:24.792914Z",
     "shell.execute_reply": "2024-04-28T20:17:24.791375Z"
    },
    "papermill": {
     "duration": 25.355265,
     "end_time": "2024-04-28T20:17:24.796258",
     "exception": false,
     "start_time": "2024-04-28T20:16:59.440993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2016 done.\n",
      "2017 done.\n",
      "2018 done.\n",
      "2019 done.\n",
      "2020 done.\n",
      "2021 done.\n",
      "2022 done.\n",
      "Downcasting floats.\n"
     ]
    }
   ],
   "source": [
    "seasons = range (2016, 2022+1)\n",
    "pbp_py = nfl.import_pbp_data(seasons)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0387642d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:24.833888Z",
     "iopub.status.busy": "2024-04-28T20:17:24.833378Z",
     "iopub.status.idle": "2024-04-28T20:17:26.016094Z",
     "shell.execute_reply": "2024-04-28T20:17:26.014357Z"
    },
    "papermill": {
     "duration": 1.206696,
     "end_time": "2024-04-28T20:17:26.019775",
     "exception": false,
     "start_time": "2024-04-28T20:17:24.813079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p = pbp_py.query(\"play_type == 'pass' & air_yards.notnull()\").reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f6ddf99b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:26.059736Z",
     "iopub.status.busy": "2024-04-28T20:17:26.059327Z",
     "iopub.status.idle": "2024-04-28T20:17:26.089518Z",
     "shell.execute_reply": "2024-04-28T20:17:26.088029Z"
    },
    "papermill": {
     "duration": 0.054843,
     "end_time": "2024-04-28T20:17:26.092822",
     "exception": false,
     "start_time": "2024-04-28T20:17:26.037979",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p['pass_length_air_yards'] = np.where(pbp_py_p['air_yards'] >= 20, \"long\", \"short\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "64d0371b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:26.128136Z",
     "iopub.status.busy": "2024-04-28T20:17:26.127661Z",
     "iopub.status.idle": "2024-04-28T20:17:26.135692Z",
     "shell.execute_reply": "2024-04-28T20:17:26.134689Z"
    },
    "papermill": {
     "duration": 0.028626,
     "end_time": "2024-04-28T20:17:26.138317",
     "exception": false,
     "start_time": "2024-04-28T20:17:26.109691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p['passing_yards'] = np.where(pbp_py_p['passing_yards'].isnull(), 0, pbp_py_p['passing_yards'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ebdf5928",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:26.173676Z",
     "iopub.status.busy": "2024-04-28T20:17:26.173177Z",
     "iopub.status.idle": "2024-04-28T20:17:26.199734Z",
     "shell.execute_reply": "2024-04-28T20:17:26.198132Z"
    },
    "papermill": {
     "duration": 0.047338,
     "end_time": "2024-04-28T20:17:26.202381",
     "exception": false,
     "start_time": "2024-04-28T20:17:26.155043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    131606.000000\n",
       "mean          7.191807\n",
       "std           9.666765\n",
       "min         -20.000000\n",
       "25%           0.000000\n",
       "50%           5.000000\n",
       "75%          11.000000\n",
       "max          98.000000\n",
       "Name: passing_yards, dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p['passing_yards'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "21c8a2d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:26.239086Z",
     "iopub.status.busy": "2024-04-28T20:17:26.238593Z",
     "iopub.status.idle": "2024-04-28T20:17:26.715542Z",
     "shell.execute_reply": "2024-04-28T20:17:26.714148Z"
    },
    "papermill": {
     "duration": 0.499448,
     "end_time": "2024-04-28T20:17:26.719180",
     "exception": false,
     "start_time": "2024-04-28T20:17:26.219732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    116085.000000\n",
       "mean          6.525623\n",
       "std           7.695175\n",
       "min         -20.000000\n",
       "25%           0.000000\n",
       "50%           5.000000\n",
       "75%          10.000000\n",
       "max          95.000000\n",
       "Name: passing_yards, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p.query('pass_length_air_yards == \"short\"')['passing_yards'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "27f691aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:26.757414Z",
     "iopub.status.busy": "2024-04-28T20:17:26.756868Z",
     "iopub.status.idle": "2024-04-28T20:17:26.957721Z",
     "shell.execute_reply": "2024-04-28T20:17:26.956313Z"
    },
    "papermill": {
     "duration": 0.222743,
     "end_time": "2024-04-28T20:17:26.960822",
     "exception": false,
     "start_time": "2024-04-28T20:17:26.738079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    15521.000000\n",
       "mean        12.174344\n",
       "std         17.925913\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%         26.000000\n",
       "max         98.000000\n",
       "Name: passing_yards, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p.query('pass_length_air_yards == \"long\"')[\"passing_yards\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6a6343ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:26.997903Z",
     "iopub.status.busy": "2024-04-28T20:17:26.997480Z",
     "iopub.status.idle": "2024-04-28T20:17:27.491651Z",
     "shell.execute_reply": "2024-04-28T20:17:27.490151Z"
    },
    "papermill": {
     "duration": 0.516575,
     "end_time": "2024-04-28T20:17:27.494696",
     "exception": false,
     "start_time": "2024-04-28T20:17:26.978121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    116084.000000\n",
       "mean          0.119577\n",
       "std           1.426167\n",
       "min         -13.031219\n",
       "25%          -0.606107\n",
       "50%          -0.002116\n",
       "75%           0.959070\n",
       "max           8.241420\n",
       "Name: epa, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p.query('pass_length_air_yards == \"short\"')['epa'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "886f92d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:27.534474Z",
     "iopub.status.busy": "2024-04-28T20:17:27.533993Z",
     "iopub.status.idle": "2024-04-28T20:17:27.750232Z",
     "shell.execute_reply": "2024-04-28T20:17:27.748240Z"
    },
    "papermill": {
     "duration": 0.239175,
     "end_time": "2024-04-28T20:17:27.753581",
     "exception": false,
     "start_time": "2024-04-28T20:17:27.514406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    15521.000000\n",
       "mean         0.382539\n",
       "std          2.186034\n",
       "min        -10.477921\n",
       "25%         -0.827517\n",
       "50%         -0.465127\n",
       "75%          2.136195\n",
       "max          8.789743\n",
       "Name: epa, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p.query('pass_length_air_yards== \"long\"')['epa'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fa9d528",
   "metadata": {
    "papermill": {
     "duration": 0.017706,
     "end_time": "2024-04-28T20:17:27.790595",
     "exception": false,
     "start_time": "2024-04-28T20:17:27.772889",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<h3>Plotting Data</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6ed8ff82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:27.829348Z",
     "iopub.status.busy": "2024-04-28T20:17:27.828864Z",
     "iopub.status.idle": "2024-04-28T20:17:29.524762Z",
     "shell.execute_reply": "2024-04-28T20:17:29.523318Z"
    },
    "papermill": {
     "duration": 1.719594,
     "end_time": "2024-04-28T20:17:29.528087",
     "exception": false,
     "start_time": "2024-04-28T20:17:27.808493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d2d6d872",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:29.565666Z",
     "iopub.status.busy": "2024-04-28T20:17:29.565206Z",
     "iopub.status.idle": "2024-04-28T20:17:31.866851Z",
     "shell.execute_reply": "2024-04-28T20:17:31.864998Z"
    },
    "papermill": {
     "duration": 2.323526,
     "end_time": "2024-04-28T20:17:31.869872",
     "exception": false,
     "start_time": "2024-04-28T20:17:29.546346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data=pbp_py, x='passing_yards')\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "eea19cb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:31.908743Z",
     "iopub.status.busy": "2024-04-28T20:17:31.908280Z",
     "iopub.status.idle": "2024-04-28T20:17:31.915664Z",
     "shell.execute_reply": "2024-04-28T20:17:31.914436Z"
    },
    "papermill": {
     "duration": 0.029797,
     "end_time": "2024-04-28T20:17:31.918199",
     "exception": false,
     "start_time": "2024-04-28T20:17:31.888402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sns.set_theme(style='whitegrid', palette='colorblind')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "629c2838",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:31.957752Z",
     "iopub.status.busy": "2024-04-28T20:17:31.957254Z",
     "iopub.status.idle": "2024-04-28T20:17:32.392835Z",
     "shell.execute_reply": "2024-04-28T20:17:32.391181Z"
    },
    "papermill": {
     "duration": 0.45908,
     "end_time": "2024-04-28T20:17:32.395970",
     "exception": false,
     "start_time": "2024-04-28T20:17:31.936890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_short = pbp_py_p.query('pass_length_air_yards == \"short\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1c64b25a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:32.435272Z",
     "iopub.status.busy": "2024-04-28T20:17:32.434831Z",
     "iopub.status.idle": "2024-04-28T20:17:34.665539Z",
     "shell.execute_reply": "2024-04-28T20:17:34.663853Z"
    },
    "papermill": {
     "duration": 2.254296,
     "end_time": "2024-04-28T20:17:34.668860",
     "exception": false,
     "start_time": "2024-04-28T20:17:32.414564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pbp_py_hist_short = sns.displot(data=pbp_py_p_short, binwidth=1, x='passing_yards');\n",
    "pbp_py_hist_short.set_axis_labels(\"Yards gained (or lost) during a passing play\", 'Count');\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "06eabece",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:34.712633Z",
     "iopub.status.busy": "2024-04-28T20:17:34.711616Z",
     "iopub.status.idle": "2024-04-28T20:17:35.561830Z",
     "shell.execute_reply": "2024-04-28T20:17:35.560525Z"
    },
    "papermill": {
     "duration": 0.876258,
     "end_time": "2024-04-28T20:17:35.564766",
     "exception": false,
     "start_time": "2024-04-28T20:17:34.688508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pass_boxplot = \\\n",
    "    sns.boxplot(data=pbp_py_p,\n",
    "                   x=\"pass_length_air_yards\",\n",
    "                   y=\"passing_yards\");\n",
    "pass_boxplot.set(\n",
    "    xlabel=\"Pass length (long >=20, yards, short < 20 yards)\",\n",
    "    ylabel=\"Yards gained (or lost) during a passing play\",);\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b6b8ba23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:35.607213Z",
     "iopub.status.busy": "2024-04-28T20:17:35.606698Z",
     "iopub.status.idle": "2024-04-28T20:17:35.658365Z",
     "shell.execute_reply": "2024-04-28T20:17:35.656536Z"
    },
    "papermill": {
     "duration": 0.075978,
     "end_time": "2024-04-28T20:17:35.661814",
     "exception": false,
     "start_time": "2024-04-28T20:17:35.585836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s =\\\n",
    "    pbp_py_p\\\n",
    "    .groupby(['passer_id', 'passer', 'season'])\\\n",
    "    .agg({'passing_yards': ['mean', 'count']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0837c46f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:35.703477Z",
     "iopub.status.busy": "2024-04-28T20:17:35.702768Z",
     "iopub.status.idle": "2024-04-28T20:17:35.720149Z",
     "shell.execute_reply": "2024-04-28T20:17:35.719034Z"
    },
    "papermill": {
     "duration": 0.041198,
     "end_time": "2024-04-28T20:17:35.722584",
     "exception": false,
     "start_time": "2024-04-28T20:17:35.681386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.describe of                             passing_yards      \n",
       "                                     mean count\n",
       "passer_id  passer    season                    \n",
       "00-0019596 T.Brady   2016        8.201049   572\n",
       "                     2017        7.951253   718\n",
       "                     2018        7.659451   693\n",
       "                     2019        6.563077   650\n",
       "                     2020        7.653226   744\n",
       "...                                   ...   ...\n",
       "00-0037834 B.Purdy   2022        8.339056   233\n",
       "00-0038102 K.Pickett 2022        6.195876   388\n",
       "00-0038108 B.Zappe   2022        8.489130    92\n",
       "00-0038122 D.Ridder  2022        6.156522   115\n",
       "00-0038128 M.Willis  2022        4.524590    61\n",
       "\n",
       "[738 rows x 2 columns]>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s.describe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c1960711",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:35.765590Z",
     "iopub.status.busy": "2024-04-28T20:17:35.765173Z",
     "iopub.status.idle": "2024-04-28T20:17:35.772003Z",
     "shell.execute_reply": "2024-04-28T20:17:35.770979Z"
    },
    "papermill": {
     "duration": 0.030873,
     "end_time": "2024-04-28T20:17:35.774767",
     "exception": false,
     "start_time": "2024-04-28T20:17:35.743894",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s.columns = list(map(\"_\".join, pbp_py_p_s.columns.values))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d9569b9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:35.831475Z",
     "iopub.status.busy": "2024-04-28T20:17:35.830576Z",
     "iopub.status.idle": "2024-04-28T20:17:35.839090Z",
     "shell.execute_reply": "2024-04-28T20:17:35.838018Z"
    },
    "papermill": {
     "duration": 0.038358,
     "end_time": "2024-04-28T20:17:35.841536",
     "exception": false,
     "start_time": "2024-04-28T20:17:35.803178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['passing_yards_mean', 'passing_yards_count'], dtype='object')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9bd64312",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:35.983970Z",
     "iopub.status.busy": "2024-04-28T20:17:35.982980Z",
     "iopub.status.idle": "2024-04-28T20:17:35.990295Z",
     "shell.execute_reply": "2024-04-28T20:17:35.988886Z"
    },
    "papermill": {
     "duration": 0.031952,
     "end_time": "2024-04-28T20:17:35.993143",
     "exception": false,
     "start_time": "2024-04-28T20:17:35.961191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s.rename(\\\n",
    "        columns={'passing_yards_mean': 'ypa', \n",
    "                 'passing_yards_count': 'n'},\n",
    "                 inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b044857d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:36.039012Z",
     "iopub.status.busy": "2024-04-28T20:17:36.038009Z",
     "iopub.status.idle": "2024-04-28T20:17:36.060541Z",
     "shell.execute_reply": "2024-04-28T20:17:36.059249Z"
    },
    "papermill": {
     "duration": 0.048479,
     "end_time": "2024-04-28T20:17:36.064179",
     "exception": false,
     "start_time": "2024-04-28T20:17:36.015700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>ypa</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>passer_id</th>\n",
       "      <th>passer</th>\n",
       "      <th>season</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>00-0035544</th>\n",
       "      <th>T.Kennedy</th>\n",
       "      <th>2021</th>\n",
       "      <td>75.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033132</th>\n",
       "      <th>K.Byard</th>\n",
       "      <th>2018</th>\n",
       "      <td>66.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0031235</th>\n",
       "      <th>O.Beckham</th>\n",
       "      <th>2018</th>\n",
       "      <td>53.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0030669</th>\n",
       "      <th>A.Wilson</th>\n",
       "      <th>2018</th>\n",
       "      <td>52.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0029632</th>\n",
       "      <th>M.Sanu</th>\n",
       "      <th>2017</th>\n",
       "      <td>51.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              ypa  n\n",
       "passer_id  passer    season         \n",
       "00-0035544 T.Kennedy 2021    75.0  1\n",
       "00-0033132 K.Byard   2018    66.0  1\n",
       "00-0031235 O.Beckham 2018    53.0  2\n",
       "00-0030669 A.Wilson  2018    52.0  1\n",
       "00-0029632 M.Sanu    2017    51.0  1"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s\\\n",
    "    .sort_values(by=['ypa'], ascending=False)\\\n",
    "    .head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8810e6d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:36.110519Z",
     "iopub.status.busy": "2024-04-28T20:17:36.109420Z",
     "iopub.status.idle": "2024-04-28T20:17:36.126598Z",
     "shell.execute_reply": "2024-04-28T20:17:36.124894Z"
    },
    "papermill": {
     "duration": 0.042598,
     "end_time": "2024-04-28T20:17:36.129754",
     "exception": false,
     "start_time": "2024-04-28T20:17:36.087156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s_100 = \\\n",
    "    pbp_py_p_s\\\n",
    "    .query(\"n >=100\")\\\n",
    "    .sort_values(by=['ypa'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a2346d60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:36.173098Z",
     "iopub.status.busy": "2024-04-28T20:17:36.172581Z",
     "iopub.status.idle": "2024-04-28T20:17:36.190563Z",
     "shell.execute_reply": "2024-04-28T20:17:36.189363Z"
    },
    "papermill": {
     "duration": 0.042942,
     "end_time": "2024-04-28T20:17:36.193461",
     "exception": false,
     "start_time": "2024-04-28T20:17:36.150519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>ypa</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>passer_id</th>\n",
       "      <th>passer</th>\n",
       "      <th>season</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>00-0023682</th>\n",
       "      <th>R.Fitzpatrick</th>\n",
       "      <th>2018</th>\n",
       "      <td>9.617887</td>\n",
       "      <td>246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0026143</th>\n",
       "      <th>M.Ryan</th>\n",
       "      <th>2016</th>\n",
       "      <td>9.442155</td>\n",
       "      <td>631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0029701</th>\n",
       "      <th>R.Tannehill</th>\n",
       "      <th>2019</th>\n",
       "      <td>9.069971</td>\n",
       "      <td>343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033537</th>\n",
       "      <th>D.Watson</th>\n",
       "      <th>2020</th>\n",
       "      <td>8.898524</td>\n",
       "      <td>542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0036212</th>\n",
       "      <th>T.Tagovailoa</th>\n",
       "      <th>2022</th>\n",
       "      <td>8.892231</td>\n",
       "      <td>399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0031345</th>\n",
       "      <th>J.Garoppolo</th>\n",
       "      <th>2017</th>\n",
       "      <td>8.863636</td>\n",
       "      <td>176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033873</th>\n",
       "      <th>P.Mahomes</th>\n",
       "      <th>2018</th>\n",
       "      <td>8.709678</td>\n",
       "      <td>651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0036442</th>\n",
       "      <th>J.Burrow</th>\n",
       "      <th>2021</th>\n",
       "      <td>8.673748</td>\n",
       "      <td>659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0026498</th>\n",
       "      <th>M.Stafford</th>\n",
       "      <th>2019</th>\n",
       "      <td>8.647058</td>\n",
       "      <td>289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0031345</th>\n",
       "      <th>J.Garoppolo</th>\n",
       "      <th>2021</th>\n",
       "      <td>8.502935</td>\n",
       "      <td>511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033319</th>\n",
       "      <th>N.Mullens</th>\n",
       "      <th>2018</th>\n",
       "      <td>8.433333</td>\n",
       "      <td>270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033537</th>\n",
       "      <th>D.Watson</th>\n",
       "      <th>2017</th>\n",
       "      <td>8.410892</td>\n",
       "      <td>202</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033077</th>\n",
       "      <th>D.Prescott</th>\n",
       "      <th>2020</th>\n",
       "      <td>8.398190</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0034869</th>\n",
       "      <th>S.Darnold</th>\n",
       "      <th>2022</th>\n",
       "      <td>8.343065</td>\n",
       "      <td>137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0037834</th>\n",
       "      <th>B.Purdy</th>\n",
       "      <th>2022</th>\n",
       "      <td>8.339056</td>\n",
       "      <td>233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0029604</th>\n",
       "      <th>K.Cousins</th>\n",
       "      <th>2020</th>\n",
       "      <td>8.313840</td>\n",
       "      <td>513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0031345</th>\n",
       "      <th>J.Garoppolo</th>\n",
       "      <th>2019</th>\n",
       "      <td>8.280075</td>\n",
       "      <td>532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0025708</th>\n",
       "      <th>M.Moore</th>\n",
       "      <th>2016</th>\n",
       "      <td>8.278688</td>\n",
       "      <td>122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033873</th>\n",
       "      <th>P.Mahomes</th>\n",
       "      <th>2019</th>\n",
       "      <td>8.275167</td>\n",
       "      <td>596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0020531</th>\n",
       "      <th>D.Brees</th>\n",
       "      <th>2017</th>\n",
       "      <td>8.257425</td>\n",
       "      <td>606</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      ypa    n\n",
       "passer_id  passer        season               \n",
       "00-0023682 R.Fitzpatrick 2018    9.617887  246\n",
       "00-0026143 M.Ryan        2016    9.442155  631\n",
       "00-0029701 R.Tannehill   2019    9.069971  343\n",
       "00-0033537 D.Watson      2020    8.898524  542\n",
       "00-0036212 T.Tagovailoa  2022    8.892231  399\n",
       "00-0031345 J.Garoppolo   2017    8.863636  176\n",
       "00-0033873 P.Mahomes     2018    8.709678  651\n",
       "00-0036442 J.Burrow      2021    8.673748  659\n",
       "00-0026498 M.Stafford    2019    8.647058  289\n",
       "00-0031345 J.Garoppolo   2021    8.502935  511\n",
       "00-0033319 N.Mullens     2018    8.433333  270\n",
       "00-0033537 D.Watson      2017    8.410892  202\n",
       "00-0033077 D.Prescott    2020    8.398190  221\n",
       "00-0034869 S.Darnold     2022    8.343065  137\n",
       "00-0037834 B.Purdy       2022    8.339056  233\n",
       "00-0029604 K.Cousins     2020    8.313840  513\n",
       "00-0031345 J.Garoppolo   2019    8.280075  532\n",
       "00-0025708 M.Moore       2016    8.278688  122\n",
       "00-0033873 P.Mahomes     2019    8.275167  596\n",
       "00-0020531 D.Brees       2017    8.257425  606"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s_100.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "88cf5075",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:36.237501Z",
     "iopub.status.busy": "2024-04-28T20:17:36.236699Z",
     "iopub.status.idle": "2024-04-28T20:17:36.436213Z",
     "shell.execute_reply": "2024-04-28T20:17:36.434985Z"
    },
    "papermill": {
     "duration": 0.22532,
     "end_time": "2024-04-28T20:17:36.439351",
     "exception": false,
     "start_time": "2024-04-28T20:17:36.214031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>play_id</th>\n",
       "      <th>game_id</th>\n",
       "      <th>old_game_id</th>\n",
       "      <th>home_team</th>\n",
       "      <th>away_team</th>\n",
       "      <th>season_type</th>\n",
       "      <th>week</th>\n",
       "      <th>posteam</th>\n",
       "      <th>posteam_type</th>\n",
       "      <th>...</th>\n",
       "      <th>defense_players</th>\n",
       "      <th>n_offense</th>\n",
       "      <th>n_defense</th>\n",
       "      <th>ngs_air_yards</th>\n",
       "      <th>time_to_throw</th>\n",
       "      <th>was_pressure</th>\n",
       "      <th>route</th>\n",
       "      <th>defense_man_zone_type</th>\n",
       "      <th>defense_coverage_type</th>\n",
       "      <th>pass_length_air_yards</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>85.0</td>\n",
       "      <td>2016_01_BUF_BAL</td>\n",
       "      <td>2016091101</td>\n",
       "      <td>BAL</td>\n",
       "      <td>BUF</td>\n",
       "      <td>REG</td>\n",
       "      <td>1</td>\n",
       "      <td>BAL</td>\n",
       "      <td>home</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0031171;00-0029542;00-0029566;00-0030073;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>-4.530000</td>\n",
       "      <td>2.404</td>\n",
       "      <td>False</td>\n",
       "      <td>FLAT</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>130.0</td>\n",
       "      <td>2016_01_BUF_BAL</td>\n",
       "      <td>2016091101</td>\n",
       "      <td>BAL</td>\n",
       "      <td>BUF</td>\n",
       "      <td>REG</td>\n",
       "      <td>1</td>\n",
       "      <td>BAL</td>\n",
       "      <td>home</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0029542;00-0031171;00-0029566;00-0030073;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.710000</td>\n",
       "      <td>2.093</td>\n",
       "      <td>False</td>\n",
       "      <td>FLAT</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "      <td>216.0</td>\n",
       "      <td>2016_01_BUF_BAL</td>\n",
       "      <td>2016091101</td>\n",
       "      <td>BAL</td>\n",
       "      <td>BUF</td>\n",
       "      <td>REG</td>\n",
       "      <td>1</td>\n",
       "      <td>BUF</td>\n",
       "      <td>away</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0031170;00-0027560;00-0027965;00-0031296;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.610000</td>\n",
       "      <td>2.537</td>\n",
       "      <td>False</td>\n",
       "      <td>ANGLE</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11</td>\n",
       "      <td>261.0</td>\n",
       "      <td>2016_01_BUF_BAL</td>\n",
       "      <td>2016091101</td>\n",
       "      <td>BAL</td>\n",
       "      <td>BUF</td>\n",
       "      <td>REG</td>\n",
       "      <td>1</td>\n",
       "      <td>BUF</td>\n",
       "      <td>away</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0031170;00-0027560;00-0027965;00-0031296;00...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>-3.460000</td>\n",
       "      <td>2.265</td>\n",
       "      <td>False</td>\n",
       "      <td>SCREEN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13</td>\n",
       "      <td>310.0</td>\n",
       "      <td>2016_01_BUF_BAL</td>\n",
       "      <td>2016091101</td>\n",
       "      <td>BAL</td>\n",
       "      <td>BUF</td>\n",
       "      <td>REG</td>\n",
       "      <td>1</td>\n",
       "      <td>BAL</td>\n",
       "      <td>home</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0029542;00-0031171;00-0029566;00-0030073;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>3.560000</td>\n",
       "      <td>1.921</td>\n",
       "      <td>False</td>\n",
       "      <td>FLAT</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131601</th>\n",
       "      <td>336300</td>\n",
       "      <td>3635.0</td>\n",
       "      <td>2022_22_KC_PHI</td>\n",
       "      <td>2023021200</td>\n",
       "      <td>PHI</td>\n",
       "      <td>KC</td>\n",
       "      <td>POST</td>\n",
       "      <td>22</td>\n",
       "      <td>PHI</td>\n",
       "      <td>home</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0034818;00-0036374;00-0027662;00-0035625;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>38.220001</td>\n",
       "      <td>3.070</td>\n",
       "      <td>False</td>\n",
       "      <td>GO</td>\n",
       "      <td>ZONE_COVERAGE</td>\n",
       "      <td>COVER_3</td>\n",
       "      <td>long</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131602</th>\n",
       "      <td>336305</td>\n",
       "      <td>3736.0</td>\n",
       "      <td>2022_22_KC_PHI</td>\n",
       "      <td>2023021200</td>\n",
       "      <td>PHI</td>\n",
       "      <td>KC</td>\n",
       "      <td>POST</td>\n",
       "      <td>22</td>\n",
       "      <td>KC</td>\n",
       "      <td>away</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0035386;00-0034993;00-0034375;00-0029653;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>4.630000</td>\n",
       "      <td>2.702</td>\n",
       "      <td>False</td>\n",
       "      <td>OUT</td>\n",
       "      <td>ZONE_COVERAGE</td>\n",
       "      <td>COVER_3</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131603</th>\n",
       "      <td>336307</td>\n",
       "      <td>3789.0</td>\n",
       "      <td>2022_22_KC_PHI</td>\n",
       "      <td>2023021200</td>\n",
       "      <td>PHI</td>\n",
       "      <td>KC</td>\n",
       "      <td>POST</td>\n",
       "      <td>22</td>\n",
       "      <td>KC</td>\n",
       "      <td>away</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0035386;00-0034993;00-0034375;00-0029653;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>4.240000</td>\n",
       "      <td>1.368</td>\n",
       "      <td>False</td>\n",
       "      <td>HITCH</td>\n",
       "      <td>MAN_COVERAGE</td>\n",
       "      <td>COVER_1</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131604</th>\n",
       "      <td>336311</td>\n",
       "      <td>3876.0</td>\n",
       "      <td>2022_22_KC_PHI</td>\n",
       "      <td>2023021200</td>\n",
       "      <td>PHI</td>\n",
       "      <td>KC</td>\n",
       "      <td>POST</td>\n",
       "      <td>22</td>\n",
       "      <td>KC</td>\n",
       "      <td>away</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0035386;00-0034993;00-0034375;00-0029653;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>-4.730000</td>\n",
       "      <td>1.835</td>\n",
       "      <td>True</td>\n",
       "      <td>SCREEN</td>\n",
       "      <td>MAN_COVERAGE</td>\n",
       "      <td>COVER_1</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131605</th>\n",
       "      <td>336322</td>\n",
       "      <td>4072.0</td>\n",
       "      <td>2022_22_KC_PHI</td>\n",
       "      <td>2023021200</td>\n",
       "      <td>PHI</td>\n",
       "      <td>KC</td>\n",
       "      <td>POST</td>\n",
       "      <td>22</td>\n",
       "      <td>PHI</td>\n",
       "      <td>home</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0036374;00-0035157;00-0035625;00-0037819;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.073</td>\n",
       "      <td>False</td>\n",
       "      <td>None</td>\n",
       "      <td>ZONE_COVERAGE</td>\n",
       "      <td>PREVENT</td>\n",
       "      <td>long</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>131606 rows × 392 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         index  play_id          game_id old_game_id home_team away_team  \\\n",
       "0            3     85.0  2016_01_BUF_BAL  2016091101       BAL       BUF   \n",
       "1            5    130.0  2016_01_BUF_BAL  2016091101       BAL       BUF   \n",
       "2            9    216.0  2016_01_BUF_BAL  2016091101       BAL       BUF   \n",
       "3           11    261.0  2016_01_BUF_BAL  2016091101       BAL       BUF   \n",
       "4           13    310.0  2016_01_BUF_BAL  2016091101       BAL       BUF   \n",
       "...        ...      ...              ...         ...       ...       ...   \n",
       "131601  336300   3635.0   2022_22_KC_PHI  2023021200       PHI        KC   \n",
       "131602  336305   3736.0   2022_22_KC_PHI  2023021200       PHI        KC   \n",
       "131603  336307   3789.0   2022_22_KC_PHI  2023021200       PHI        KC   \n",
       "131604  336311   3876.0   2022_22_KC_PHI  2023021200       PHI        KC   \n",
       "131605  336322   4072.0   2022_22_KC_PHI  2023021200       PHI        KC   \n",
       "\n",
       "       season_type  week posteam posteam_type  ...  \\\n",
       "0              REG     1     BAL         home  ...   \n",
       "1              REG     1     BAL         home  ...   \n",
       "2              REG     1     BUF         away  ...   \n",
       "3              REG     1     BUF         away  ...   \n",
       "4              REG     1     BAL         home  ...   \n",
       "...            ...   ...     ...          ...  ...   \n",
       "131601        POST    22     PHI         home  ...   \n",
       "131602        POST    22      KC         away  ...   \n",
       "131603        POST    22      KC         away  ...   \n",
       "131604        POST    22      KC         away  ...   \n",
       "131605        POST    22     PHI         home  ...   \n",
       "\n",
       "                                          defense_players n_offense  \\\n",
       "0       00-0031171;00-0029542;00-0029566;00-0030073;00...      11.0   \n",
       "1       00-0029542;00-0031171;00-0029566;00-0030073;00...      11.0   \n",
       "2       00-0031170;00-0027560;00-0027965;00-0031296;00...      11.0   \n",
       "3       00-0031170;00-0027560;00-0027965;00-0031296;00...      10.0   \n",
       "4       00-0029542;00-0031171;00-0029566;00-0030073;00...      11.0   \n",
       "...                                                   ...       ...   \n",
       "131601  00-0034818;00-0036374;00-0027662;00-0035625;00...      11.0   \n",
       "131602  00-0035386;00-0034993;00-0034375;00-0029653;00...      11.0   \n",
       "131603  00-0035386;00-0034993;00-0034375;00-0029653;00...      11.0   \n",
       "131604  00-0035386;00-0034993;00-0034375;00-0029653;00...      11.0   \n",
       "131605  00-0036374;00-0035157;00-0035625;00-0037819;00...      11.0   \n",
       "\n",
       "        n_defense ngs_air_yards  time_to_throw  was_pressure   route  \\\n",
       "0            11.0     -4.530000          2.404         False    FLAT   \n",
       "1            11.0      1.710000          2.093         False    FLAT   \n",
       "2            10.0      1.610000          2.537         False   ANGLE   \n",
       "3            10.0     -3.460000          2.265         False  SCREEN   \n",
       "4            11.0      3.560000          1.921         False    FLAT   \n",
       "...           ...           ...            ...           ...     ...   \n",
       "131601       11.0     38.220001          3.070         False      GO   \n",
       "131602       11.0      4.630000          2.702         False     OUT   \n",
       "131603       11.0      4.240000          1.368         False   HITCH   \n",
       "131604       11.0     -4.730000          1.835          True  SCREEN   \n",
       "131605       11.0           NaN          6.073         False    None   \n",
       "\n",
       "       defense_man_zone_type  defense_coverage_type  pass_length_air_yards  \n",
       "0                       None                   None                  short  \n",
       "1                       None                   None                  short  \n",
       "2                       None                   None                  short  \n",
       "3                       None                   None                  short  \n",
       "4                       None                   None                  short  \n",
       "...                      ...                    ...                    ...  \n",
       "131601         ZONE_COVERAGE                COVER_3                   long  \n",
       "131602         ZONE_COVERAGE                COVER_3                  short  \n",
       "131603          MAN_COVERAGE                COVER_1                  short  \n",
       "131604          MAN_COVERAGE                COVER_1                  short  \n",
       "131605         ZONE_COVERAGE                PREVENT                   long  \n",
       "\n",
       "[131606 rows x 392 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1de6f30a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:36.485106Z",
     "iopub.status.busy": "2024-04-28T20:17:36.484352Z",
     "iopub.status.idle": "2024-04-28T20:17:36.544086Z",
     "shell.execute_reply": "2024-04-28T20:17:36.542049Z"
    },
    "papermill": {
     "duration": 0.086836,
     "end_time": "2024-04-28T20:17:36.547612",
     "exception": false,
     "start_time": "2024-04-28T20:17:36.460776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s_pl =pbp_py_p\\\n",
    "    .groupby(['passer_id', 'passer',\n",
    "              'season', 'pass_length_air_yards'])\\\n",
    "    .agg({'passing_yards': ['mean', 'count']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "bbe04054",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:36.598115Z",
     "iopub.status.busy": "2024-04-28T20:17:36.596818Z",
     "iopub.status.idle": "2024-04-28T20:17:36.617008Z",
     "shell.execute_reply": "2024-04-28T20:17:36.615582Z"
    },
    "papermill": {
     "duration": 0.049376,
     "end_time": "2024-04-28T20:17:36.620099",
     "exception": false,
     "start_time": "2024-04-28T20:17:36.570723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">passing_yards</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>passer_id</th>\n",
       "      <th>passer</th>\n",
       "      <th>season</th>\n",
       "      <th>pass_length_air_yards</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"14\" valign=\"top\">00-0019596</th>\n",
       "      <th rowspan=\"14\" valign=\"top\">T.Brady</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">2016</th>\n",
       "      <th>long</th>\n",
       "      <td>15.768116</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>7.163022</td>\n",
       "      <td>503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2017</th>\n",
       "      <th>long</th>\n",
       "      <td>13.264706</td>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>7.071429</td>\n",
       "      <td>616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2018</th>\n",
       "      <th>long</th>\n",
       "      <td>10.232877</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>7.356452</td>\n",
       "      <td>620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2019</th>\n",
       "      <th>long</th>\n",
       "      <td>10.828571</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>6.048276</td>\n",
       "      <td>580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2020</th>\n",
       "      <th>long</th>\n",
       "      <td>12.252101</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>6.777600</td>\n",
       "      <td>625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2021</th>\n",
       "      <th>long</th>\n",
       "      <td>12.242424</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>6.634697</td>\n",
       "      <td>709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2022</th>\n",
       "      <th>long</th>\n",
       "      <td>10.802469</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>5.832168</td>\n",
       "      <td>715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">00-0020531</th>\n",
       "      <th rowspan=\"6\" valign=\"top\">D.Brees</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">2016</th>\n",
       "      <th>long</th>\n",
       "      <td>18.142857</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>6.631313</td>\n",
       "      <td>594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2017</th>\n",
       "      <th>long</th>\n",
       "      <td>16.632353</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>7.198885</td>\n",
       "      <td>538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2018</th>\n",
       "      <th>long</th>\n",
       "      <td>14.903226</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>7.178571</td>\n",
       "      <td>504</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                passing_yards      \n",
       "                                                         mean count\n",
       "passer_id  passer  season pass_length_air_yards                    \n",
       "00-0019596 T.Brady 2016   long                      15.768116    69\n",
       "                          short                      7.163022   503\n",
       "                   2017   long                      13.264706   102\n",
       "                          short                      7.071429   616\n",
       "                   2018   long                      10.232877    73\n",
       "                          short                      7.356452   620\n",
       "                   2019   long                      10.828571    70\n",
       "                          short                      6.048276   580\n",
       "                   2020   long                      12.252101   119\n",
       "                          short                      6.777600   625\n",
       "                   2021   long                      12.242424    99\n",
       "                          short                      6.634697   709\n",
       "                   2022   long                      10.802469    81\n",
       "                          short                      5.832168   715\n",
       "00-0020531 D.Brees 2016   long                      18.142857    70\n",
       "                          short                      6.631313   594\n",
       "                   2017   long                      16.632353    68\n",
       "                          short                      7.198885   538\n",
       "                   2018   long                      14.903226    62\n",
       "                          short                      7.178571   504"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s_pl.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3bc2248e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:36.667042Z",
     "iopub.status.busy": "2024-04-28T20:17:36.665907Z",
     "iopub.status.idle": "2024-04-28T20:17:36.675540Z",
     "shell.execute_reply": "2024-04-28T20:17:36.674403Z"
    },
    "papermill": {
     "duration": 0.03673,
     "end_time": "2024-04-28T20:17:36.678410",
     "exception": false,
     "start_time": "2024-04-28T20:17:36.641680",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s_pl.columns =\\\n",
    "    list(map(\"_\".join, pbp_py_p_s_pl.columns.values))\n",
    "pbp_py_p_s_pl\\\n",
    "    .rename(columns={'passing_yards_mean': 'ypa',\n",
    "                     'passing_yards_count': 'n'},\n",
    "                     inplace=True)\n",
    "pbp_py_p_s_pl.reset_index(inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "737964b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:36.727099Z",
     "iopub.status.busy": "2024-04-28T20:17:36.726616Z",
     "iopub.status.idle": "2024-04-28T20:17:36.742145Z",
     "shell.execute_reply": "2024-04-28T20:17:36.740751Z"
    },
    "papermill": {
     "duration": 0.043951,
     "end_time": "2024-04-28T20:17:36.744818",
     "exception": false,
     "start_time": "2024-04-28T20:17:36.700867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "q_value=(\n",
    "    '(n >= 100 & ' +\n",
    "     'pass_length_air_yards == \"short\") | ' +\n",
    "    '(n >= 30 & ' +\n",
    "    'pass_length_air_yards == \"long\")'\n",
    " )\n",
    "pbp_py_p_s_pl = pbp_py_p_s_pl.query(q_value).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e55154fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:36.792799Z",
     "iopub.status.busy": "2024-04-28T20:17:36.792343Z",
     "iopub.status.idle": "2024-04-28T20:17:36.800312Z",
     "shell.execute_reply": "2024-04-28T20:17:36.798854Z"
    },
    "papermill": {
     "duration": 0.035633,
     "end_time": "2024-04-28T20:17:36.803108",
     "exception": false,
     "start_time": "2024-04-28T20:17:36.767475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "col_save =\\\n",
    "    ['passer_id', 'passer', 'season', 'pass_length_air_yards', 'ypa']\n",
    "air_yards_py=\\\n",
    "    pbp_py_p_s_pl[col_save].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8346e670",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:36.849490Z",
     "iopub.status.busy": "2024-04-28T20:17:36.848976Z",
     "iopub.status.idle": "2024-04-28T20:17:36.867776Z",
     "shell.execute_reply": "2024-04-28T20:17:36.866192Z"
    },
    "papermill": {
     "duration": 0.047304,
     "end_time": "2024-04-28T20:17:36.871477",
     "exception": false,
     "start_time": "2024-04-28T20:17:36.824173",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passer_id</th>\n",
       "      <th>passer</th>\n",
       "      <th>season</th>\n",
       "      <th>pass_length_air_yards</th>\n",
       "      <th>ypa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2016</td>\n",
       "      <td>long</td>\n",
       "      <td>15.768116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2016</td>\n",
       "      <td>short</td>\n",
       "      <td>7.163022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2017</td>\n",
       "      <td>long</td>\n",
       "      <td>13.264706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2017</td>\n",
       "      <td>short</td>\n",
       "      <td>7.071429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2018</td>\n",
       "      <td>long</td>\n",
       "      <td>10.232877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>00-0037327</td>\n",
       "      <td>S.Thompson</td>\n",
       "      <td>2022</td>\n",
       "      <td>short</td>\n",
       "      <td>4.664122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>500</th>\n",
       "      <td>00-0037834</td>\n",
       "      <td>B.Purdy</td>\n",
       "      <td>2022</td>\n",
       "      <td>short</td>\n",
       "      <td>7.720588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>00-0038102</td>\n",
       "      <td>K.Pickett</td>\n",
       "      <td>2022</td>\n",
       "      <td>long</td>\n",
       "      <td>11.325582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>00-0038102</td>\n",
       "      <td>K.Pickett</td>\n",
       "      <td>2022</td>\n",
       "      <td>short</td>\n",
       "      <td>5.556522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>503</th>\n",
       "      <td>00-0038122</td>\n",
       "      <td>D.Ridder</td>\n",
       "      <td>2022</td>\n",
       "      <td>short</td>\n",
       "      <td>6.068627</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>504 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      passer_id      passer  season pass_length_air_yards        ypa\n",
       "0    00-0019596     T.Brady    2016                  long  15.768116\n",
       "1    00-0019596     T.Brady    2016                 short   7.163022\n",
       "2    00-0019596     T.Brady    2017                  long  13.264706\n",
       "3    00-0019596     T.Brady    2017                 short   7.071429\n",
       "4    00-0019596     T.Brady    2018                  long  10.232877\n",
       "..          ...         ...     ...                   ...        ...\n",
       "499  00-0037327  S.Thompson    2022                 short   4.664122\n",
       "500  00-0037834     B.Purdy    2022                 short   7.720588\n",
       "501  00-0038102   K.Pickett    2022                  long  11.325582\n",
       "502  00-0038102   K.Pickett    2022                 short   5.556522\n",
       "503  00-0038122    D.Ridder    2022                 short   6.068627\n",
       "\n",
       "[504 rows x 5 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "air_yards_py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "d7880026",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:36.921982Z",
     "iopub.status.busy": "2024-04-28T20:17:36.921529Z",
     "iopub.status.idle": "2024-04-28T20:17:36.929558Z",
     "shell.execute_reply": "2024-04-28T20:17:36.928116Z"
    },
    "papermill": {
     "duration": 0.038464,
     "end_time": "2024-04-28T20:17:36.932513",
     "exception": false,
     "start_time": "2024-04-28T20:17:36.894049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "air_yards_lag_py =\\\n",
    "    air_yards_py.copy()\n",
    "air_yards_lag_py['season'] +=1\n",
    "air_yards_lag_py\\\n",
    "    .rename(columns={'ypa': 'ypa_last'},\n",
    "           inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "7eca64d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:36.980674Z",
     "iopub.status.busy": "2024-04-28T20:17:36.980175Z",
     "iopub.status.idle": "2024-04-28T20:17:36.996548Z",
     "shell.execute_reply": "2024-04-28T20:17:36.995382Z"
    },
    "papermill": {
     "duration": 0.043758,
     "end_time": "2024-04-28T20:17:36.999220",
     "exception": false,
     "start_time": "2024-04-28T20:17:36.955462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passer_id</th>\n",
       "      <th>passer</th>\n",
       "      <th>season</th>\n",
       "      <th>pass_length_air_yards</th>\n",
       "      <th>ypa_last</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2017</td>\n",
       "      <td>long</td>\n",
       "      <td>15.768116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2017</td>\n",
       "      <td>short</td>\n",
       "      <td>7.163022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2018</td>\n",
       "      <td>long</td>\n",
       "      <td>13.264706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2018</td>\n",
       "      <td>short</td>\n",
       "      <td>7.071429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2019</td>\n",
       "      <td>long</td>\n",
       "      <td>10.232877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>00-0037327</td>\n",
       "      <td>S.Thompson</td>\n",
       "      <td>2023</td>\n",
       "      <td>short</td>\n",
       "      <td>4.664122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>500</th>\n",
       "      <td>00-0037834</td>\n",
       "      <td>B.Purdy</td>\n",
       "      <td>2023</td>\n",
       "      <td>short</td>\n",
       "      <td>7.720588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>00-0038102</td>\n",
       "      <td>K.Pickett</td>\n",
       "      <td>2023</td>\n",
       "      <td>long</td>\n",
       "      <td>11.325582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>00-0038102</td>\n",
       "      <td>K.Pickett</td>\n",
       "      <td>2023</td>\n",
       "      <td>short</td>\n",
       "      <td>5.556522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>503</th>\n",
       "      <td>00-0038122</td>\n",
       "      <td>D.Ridder</td>\n",
       "      <td>2023</td>\n",
       "      <td>short</td>\n",
       "      <td>6.068627</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>504 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      passer_id      passer  season pass_length_air_yards   ypa_last\n",
       "0    00-0019596     T.Brady    2017                  long  15.768116\n",
       "1    00-0019596     T.Brady    2017                 short   7.163022\n",
       "2    00-0019596     T.Brady    2018                  long  13.264706\n",
       "3    00-0019596     T.Brady    2018                 short   7.071429\n",
       "4    00-0019596     T.Brady    2019                  long  10.232877\n",
       "..          ...         ...     ...                   ...        ...\n",
       "499  00-0037327  S.Thompson    2023                 short   4.664122\n",
       "500  00-0037834     B.Purdy    2023                 short   7.720588\n",
       "501  00-0038102   K.Pickett    2023                  long  11.325582\n",
       "502  00-0038102   K.Pickett    2023                 short   5.556522\n",
       "503  00-0038122    D.Ridder    2023                 short   6.068627\n",
       "\n",
       "[504 rows x 5 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "air_yards_lag_py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "313fac3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:37.051387Z",
     "iopub.status.busy": "2024-04-28T20:17:37.050841Z",
     "iopub.status.idle": "2024-04-28T20:17:37.067610Z",
     "shell.execute_reply": "2024-04-28T20:17:37.065909Z"
    },
    "papermill": {
     "duration": 0.043406,
     "end_time": "2024-04-28T20:17:37.070688",
     "exception": false,
     "start_time": "2024-04-28T20:17:37.027282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s_pl =\\\n",
    "    air_yards_py.merge(air_yards_lag_py,\n",
    "                        how='inner',\n",
    "                          on=['passer_id', 'passer',\n",
    "                            'season', 'pass_length_air_yards'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "637a08c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:37.116388Z",
     "iopub.status.busy": "2024-04-28T20:17:37.115905Z",
     "iopub.status.idle": "2024-04-28T20:17:37.137559Z",
     "shell.execute_reply": "2024-04-28T20:17:37.135875Z"
    },
    "papermill": {
     "duration": 0.04835,
     "end_time": "2024-04-28T20:17:37.140917",
     "exception": false,
     "start_time": "2024-04-28T20:17:37.092567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   pass_length_air_yards     passer  season        ypa   ypa_last\n",
      "47                  long  A.Rodgers    2019  12.092592  12.011628\n",
      "49                  long  A.Rodgers    2020  16.097826  12.092592\n",
      "51                  long  A.Rodgers    2021  14.302631  16.097826\n",
      "53                  long  A.Rodgers    2022  10.312500  14.302631\n",
      "45                 short  A.Rodgers    2017   6.041475   6.693523\n",
      "46                 short  A.Rodgers    2018   6.697446   6.041475\n",
      "48                 short  A.Rodgers    2019   6.207224   6.697446\n",
      "50                 short  A.Rodgers    2020   6.718447   6.207224\n",
      "52                 short  A.Rodgers    2021   6.777083   6.718447\n",
      "54                 short  A.Rodgers    2022   6.239130   6.777083\n",
      "0                   long    T.Brady    2017  13.264706  15.768116\n",
      "2                   long    T.Brady    2018  10.232877  13.264706\n",
      "4                   long    T.Brady    2019  10.828571  10.232877\n",
      "6                   long    T.Brady    2020  12.252101  10.828571\n",
      "8                   long    T.Brady    2021  12.242424  12.252101\n",
      "10                  long    T.Brady    2022  10.802469  12.242424\n",
      "1                  short    T.Brady    2017   7.071429   7.163022\n",
      "3                  short    T.Brady    2018   7.356452   7.071429\n",
      "5                  short    T.Brady    2019   6.048276   7.356452\n",
      "7                  short    T.Brady    2020   6.777600   6.048276\n",
      "9                  short    T.Brady    2021   6.634697   6.777600\n",
      "11                 short    T.Brady    2022   5.832168   6.634697\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "    pbp_py_p_s_pl[[\"pass_length_air_yards\", \"passer\",\n",
    "                  \"season\", \"ypa\", \"ypa_last\"]]\\\n",
    "    .query('passer == \"T.Brady\" | passer == \"A.Rodgers\"')\\\n",
    "    .sort_values([\"passer\", \"pass_length_air_yards\", \"season\"])\\\n",
    "    .to_string())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a07bf040",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:37.190133Z",
     "iopub.status.busy": "2024-04-28T20:17:37.189639Z",
     "iopub.status.idle": "2024-04-28T20:17:37.208572Z",
     "shell.execute_reply": "2024-04-28T20:17:37.206860Z"
    },
    "papermill": {
     "duration": 0.04635,
     "end_time": "2024-04-28T20:17:37.211554",
     "exception": false,
     "start_time": "2024-04-28T20:17:37.165204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 317 entries, 0 to 316\n",
      "Data columns (total 6 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   passer_id              317 non-null    object \n",
      " 1   passer                 317 non-null    object \n",
      " 2   season                 317 non-null    int64  \n",
      " 3   pass_length_air_yards  317 non-null    object \n",
      " 4   ypa                    317 non-null    float32\n",
      " 5   ypa_last               317 non-null    float32\n",
      "dtypes: float32(2), int64(1), object(3)\n",
      "memory usage: 12.5+ KB\n"
     ]
    }
   ],
   "source": [
    "pbp_py_p_s_pl.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4aaa9134",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:37.261216Z",
     "iopub.status.busy": "2024-04-28T20:17:37.260414Z",
     "iopub.status.idle": "2024-04-28T20:17:37.271705Z",
     "shell.execute_reply": "2024-04-28T20:17:37.270247Z"
    },
    "papermill": {
     "duration": 0.041276,
     "end_time": "2024-04-28T20:17:37.275099",
     "exception": false,
     "start_time": "2024-04-28T20:17:37.233823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "65"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(pbp_py_p_s_pl.passer_id.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "21073bd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:37.325282Z",
     "iopub.status.busy": "2024-04-28T20:17:37.324831Z",
     "iopub.status.idle": "2024-04-28T20:17:39.466780Z",
     "shell.execute_reply": "2024-04-28T20:17:39.464786Z"
    },
    "papermill": {
     "duration": 2.171708,
     "end_time": "2024-04-28T20:17:39.470080",
     "exception": false,
     "start_time": "2024-04-28T20:17:37.298372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(data=pbp_py_p_s_pl,\n",
    "           x=\"ypa\",\n",
    "           y=\"ypa_last\", \n",
    "           col=\"pass_length_air_yards\");\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "cb8d98ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:17:39.521299Z",
     "iopub.status.busy": "2024-04-28T20:17:39.520587Z",
     "iopub.status.idle": "2024-04-28T20:17:39.543704Z",
     "shell.execute_reply": "2024-04-28T20:17:39.542227Z"
    },
    "papermill": {
     "duration": 0.051781,
     "end_time": "2024-04-28T20:17:39.546567",
     "exception": false,
     "start_time": "2024-04-28T20:17:39.494786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>ypa</th>\n",
       "      <th>ypa_last</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pass_length_air_yards</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">long</th>\n",
       "      <th>ypa</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.234301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ypa_last</th>\n",
       "      <td>0.234301</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">short</th>\n",
       "      <th>ypa</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.438827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ypa_last</th>\n",
       "      <td>0.438827</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     ypa  ypa_last\n",
       "pass_length_air_yards                             \n",
       "long                  ypa       1.000000  0.234301\n",
       "                      ypa_last  0.234301  1.000000\n",
       "short                 ypa       1.000000  0.438827\n",
       "                      ypa_last  0.438827  1.000000"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s_pl\\\n",
    "    .query(\"ypa.notnull() & ypa_last.notnull()\")\\\n",
    "    .groupby(\"pass_length_air_yards\")[[\"ypa\", \"ypa_last\"]]\\\n",
    "    .corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1364c13",
   "metadata": {
    "papermill": {
     "duration": 0.025706,
     "end_time": "2024-04-28T20:17:39.600240",
     "exception": false,
     "start_time": "2024-04-28T20:17:39.574534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 70.782429,
   "end_time": "2024-04-28T20:17:42.895720",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-28T20:16:32.113291",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
