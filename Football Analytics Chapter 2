{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c8c6e7a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:35:37.090536Z",
     "iopub.status.busy": "2024-04-28T20:35:37.089608Z",
     "iopub.status.idle": "2024-04-28T20:35:55.638705Z",
     "shell.execute_reply": "2024-04-28T20:35:55.637001Z"
    },
    "papermill": {
     "duration": 18.57162,
     "end_time": "2024-04-28T20:35:55.641454",
     "exception": false,
     "start_time": "2024-04-28T20:35:37.069834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting nfl_data_py\r\n",
      "  Downloading nfl_data_py-0.3.1.tar.gz (16 kB)\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25hRequirement already satisfied: pandas>1 in /opt/conda/lib/python3.10/site-packages (from nfl_data_py) (2.2.2)\r\n",
      "Requirement already satisfied: appdirs>1 in /opt/conda/lib/python3.10/site-packages (from nfl_data_py) (1.4.4)\r\n",
      "Collecting fastparquet>0.5 (from nfl_data_py)\r\n",
      "  Downloading fastparquet-2024.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.1 kB)\r\n",
      "Collecting python-snappy>0.5 (from nfl_data_py)\r\n",
      "  Downloading python_snappy-0.7.1-py3-none-any.whl.metadata (1.3 kB)\r\n",
      "Requirement already satisfied: numpy>=1.20.3 in /opt/conda/lib/python3.10/site-packages (from fastparquet>0.5->nfl_data_py) (1.26.4)\r\n",
      "Collecting cramjam>=2.3 (from fastparquet>0.5->nfl_data_py)\r\n",
      "  Downloading cramjam-2.8.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.2 kB)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from fastparquet>0.5->nfl_data_py) (2024.2.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from fastparquet>0.5->nfl_data_py) (21.3)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas>1->nfl_data_py) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas>1->nfl_data_py) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>1->nfl_data_py) (2023.4)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas>1->nfl_data_py) (1.16.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->fastparquet>0.5->nfl_data_py) (3.1.1)\r\n",
      "Downloading fastparquet-2024.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m10.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading python_snappy-0.7.1-py3-none-any.whl (8.6 kB)\r\n",
      "Downloading cramjam-2.8.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m47.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hBuilding wheels for collected packages: nfl_data_py\r\n",
      "  Building wheel for nfl_data_py (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25h  Created wheel for nfl_data_py: filename=nfl_data_py-0.3.1-py3-none-any.whl size=13182 sha256=df82e3faa9ac8da0aa1580faa699c0f78bd7e5fd9ecefa5d70c02c90b026a4a2\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/ca/2e/d2/4def312ac7c070e1c0002e91ecc6923481a86c3ebd5b2c5413\r\n",
      "Successfully built nfl_data_py\r\n",
      "Installing collected packages: cramjam, python-snappy, fastparquet, nfl_data_py\r\n",
      "Successfully installed cramjam-2.8.3 fastparquet-2024.2.0 nfl_data_py-0.3.1 python-snappy-0.7.1\r\n"
     ]
    }
   ],
   "source": [
    "!pip install nfl_data_py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a82d9ede",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-28T20:35:55.667829Z",
     "iopub.status.busy": "2024-04-28T20:35:55.667452Z",
     "iopub.status.idle": "2024-04-28T20:35:56.725654Z",
     "shell.execute_reply": "2024-04-28T20:35:56.724302Z"
    },
    "papermill": {
     "duration": 1.075762,
     "end_time": "2024-04-28T20:35:56.728760",
     "exception": false,
     "start_time": "2024-04-28T20:35:55.652998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import nfl_data_py as nfl\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7de16d4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:35:56.753766Z",
     "iopub.status.busy": "2024-04-28T20:35:56.753097Z",
     "iopub.status.idle": "2024-04-28T20:36:21.101234Z",
     "shell.execute_reply": "2024-04-28T20:36:21.099699Z"
    },
    "papermill": {
     "duration": 24.364191,
     "end_time": "2024-04-28T20:36:21.104595",
     "exception": false,
     "start_time": "2024-04-28T20:35:56.740404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2016 done.\n",
      "2017 done.\n",
      "2018 done.\n",
      "2019 done.\n",
      "2020 done.\n",
      "2021 done.\n",
      "2022 done.\n",
      "Downcasting floats.\n"
     ]
    }
   ],
   "source": [
    "seasons = range (2016, 2022+1)\n",
    "pbp_py = nfl.import_pbp_data(seasons)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dc0c5fee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:21.133570Z",
     "iopub.status.busy": "2024-04-28T20:36:21.133209Z",
     "iopub.status.idle": "2024-04-28T20:36:22.154610Z",
     "shell.execute_reply": "2024-04-28T20:36:22.153267Z"
    },
    "papermill": {
     "duration": 1.03822,
     "end_time": "2024-04-28T20:36:22.157621",
     "exception": false,
     "start_time": "2024-04-28T20:36:21.119401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p = pbp_py.query(\"play_type == 'pass' & air_yards.notnull()\").reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "49cf0e9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:22.184094Z",
     "iopub.status.busy": "2024-04-28T20:36:22.183698Z",
     "iopub.status.idle": "2024-04-28T20:36:22.207057Z",
     "shell.execute_reply": "2024-04-28T20:36:22.205881Z"
    },
    "papermill": {
     "duration": 0.03908,
     "end_time": "2024-04-28T20:36:22.209704",
     "exception": false,
     "start_time": "2024-04-28T20:36:22.170624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p['pass_length_air_yards'] = np.where(pbp_py_p['air_yards'] >= 20, \"long\", \"short\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "42c8f731",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:22.237207Z",
     "iopub.status.busy": "2024-04-28T20:36:22.236156Z",
     "iopub.status.idle": "2024-04-28T20:36:22.244301Z",
     "shell.execute_reply": "2024-04-28T20:36:22.242855Z"
    },
    "papermill": {
     "duration": 0.026098,
     "end_time": "2024-04-28T20:36:22.247767",
     "exception": false,
     "start_time": "2024-04-28T20:36:22.221669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p['passing_yards'] = np.where(pbp_py_p['passing_yards'].isnull(), 0, pbp_py_p['passing_yards'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "54363634",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:22.275957Z",
     "iopub.status.busy": "2024-04-28T20:36:22.275586Z",
     "iopub.status.idle": "2024-04-28T20:36:22.298565Z",
     "shell.execute_reply": "2024-04-28T20:36:22.297249Z"
    },
    "papermill": {
     "duration": 0.04002,
     "end_time": "2024-04-28T20:36:22.300826",
     "exception": false,
     "start_time": "2024-04-28T20:36:22.260806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    131606.000000\n",
       "mean          7.191807\n",
       "std           9.666765\n",
       "min         -20.000000\n",
       "25%           0.000000\n",
       "50%           5.000000\n",
       "75%          11.000000\n",
       "max          98.000000\n",
       "Name: passing_yards, dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p['passing_yards'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cea9f0e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:22.328405Z",
     "iopub.status.busy": "2024-04-28T20:36:22.327759Z",
     "iopub.status.idle": "2024-04-28T20:36:22.791511Z",
     "shell.execute_reply": "2024-04-28T20:36:22.790201Z"
    },
    "papermill": {
     "duration": 0.480595,
     "end_time": "2024-04-28T20:36:22.794162",
     "exception": false,
     "start_time": "2024-04-28T20:36:22.313567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    116085.000000\n",
       "mean          6.525623\n",
       "std           7.695175\n",
       "min         -20.000000\n",
       "25%           0.000000\n",
       "50%           5.000000\n",
       "75%          10.000000\n",
       "max          95.000000\n",
       "Name: passing_yards, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p.query('pass_length_air_yards == \"short\"')['passing_yards'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "76e51d66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:22.823414Z",
     "iopub.status.busy": "2024-04-28T20:36:22.822996Z",
     "iopub.status.idle": "2024-04-28T20:36:23.017978Z",
     "shell.execute_reply": "2024-04-28T20:36:23.016761Z"
    },
    "papermill": {
     "duration": 0.211773,
     "end_time": "2024-04-28T20:36:23.020196",
     "exception": false,
     "start_time": "2024-04-28T20:36:22.808423",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    15521.000000\n",
       "mean        12.174344\n",
       "std         17.925913\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%         26.000000\n",
       "max         98.000000\n",
       "Name: passing_yards, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p.query('pass_length_air_yards == \"long\"')[\"passing_yards\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b132186a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:23.048034Z",
     "iopub.status.busy": "2024-04-28T20:36:23.046988Z",
     "iopub.status.idle": "2024-04-28T20:36:23.514822Z",
     "shell.execute_reply": "2024-04-28T20:36:23.513403Z"
    },
    "papermill": {
     "duration": 0.484882,
     "end_time": "2024-04-28T20:36:23.517386",
     "exception": false,
     "start_time": "2024-04-28T20:36:23.032504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    116084.000000\n",
       "mean          0.119577\n",
       "std           1.426167\n",
       "min         -13.031219\n",
       "25%          -0.606107\n",
       "50%          -0.002116\n",
       "75%           0.959070\n",
       "max           8.241420\n",
       "Name: epa, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p.query('pass_length_air_yards == \"short\"')['epa'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9a6fdd70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:23.544948Z",
     "iopub.status.busy": "2024-04-28T20:36:23.544544Z",
     "iopub.status.idle": "2024-04-28T20:36:23.736382Z",
     "shell.execute_reply": "2024-04-28T20:36:23.734932Z"
    },
    "papermill": {
     "duration": 0.208596,
     "end_time": "2024-04-28T20:36:23.738973",
     "exception": false,
     "start_time": "2024-04-28T20:36:23.530377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    15521.000000\n",
       "mean         0.382539\n",
       "std          2.186034\n",
       "min        -10.477921\n",
       "25%         -0.827517\n",
       "50%         -0.465127\n",
       "75%          2.136195\n",
       "max          8.789743\n",
       "Name: epa, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p.query('pass_length_air_yards== \"long\"')['epa'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eda84548",
   "metadata": {
    "papermill": {
     "duration": 0.012051,
     "end_time": "2024-04-28T20:36:23.763651",
     "exception": false,
     "start_time": "2024-04-28T20:36:23.751600",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<h3>Plotting Data</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "01c8aedb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:23.791811Z",
     "iopub.status.busy": "2024-04-28T20:36:23.791402Z",
     "iopub.status.idle": "2024-04-28T20:36:25.327538Z",
     "shell.execute_reply": "2024-04-28T20:36:25.326430Z"
    },
    "papermill": {
     "duration": 1.553418,
     "end_time": "2024-04-28T20:36:25.330093",
     "exception": false,
     "start_time": "2024-04-28T20:36:23.776675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7f85be79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:25.358068Z",
     "iopub.status.busy": "2024-04-28T20:36:25.357645Z",
     "iopub.status.idle": "2024-04-28T20:36:27.241654Z",
     "shell.execute_reply": "2024-04-28T20:36:27.240448Z"
    },
    "papermill": {
     "duration": 1.900359,
     "end_time": "2024-04-28T20:36:27.244114",
     "exception": false,
     "start_time": "2024-04-28T20:36:25.343755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data=pbp_py, x='passing_yards')\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "be736dfd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:27.272140Z",
     "iopub.status.busy": "2024-04-28T20:36:27.271737Z",
     "iopub.status.idle": "2024-04-28T20:36:27.278263Z",
     "shell.execute_reply": "2024-04-28T20:36:27.277046Z"
    },
    "papermill": {
     "duration": 0.023137,
     "end_time": "2024-04-28T20:36:27.280365",
     "exception": false,
     "start_time": "2024-04-28T20:36:27.257228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sns.set_theme(style='whitegrid', palette='colorblind')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d926d581",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:27.308071Z",
     "iopub.status.busy": "2024-04-28T20:36:27.307658Z",
     "iopub.status.idle": "2024-04-28T20:36:27.681037Z",
     "shell.execute_reply": "2024-04-28T20:36:27.679443Z"
    },
    "papermill": {
     "duration": 0.39056,
     "end_time": "2024-04-28T20:36:27.683846",
     "exception": false,
     "start_time": "2024-04-28T20:36:27.293286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_short = pbp_py_p.query('pass_length_air_yards == \"short\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3497bbf3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:27.713199Z",
     "iopub.status.busy": "2024-04-28T20:36:27.712767Z",
     "iopub.status.idle": "2024-04-28T20:36:29.620086Z",
     "shell.execute_reply": "2024-04-28T20:36:29.618370Z"
    },
    "papermill": {
     "duration": 1.925837,
     "end_time": "2024-04-28T20:36:29.622642",
     "exception": false,
     "start_time": "2024-04-28T20:36:27.696805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pbp_py_hist_short = sns.displot(data=pbp_py_p_short, binwidth=1, x='passing_yards');\n",
    "pbp_py_hist_short.set_axis_labels(\"Yards gained (or lost) during a passing play\", 'Count');\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a2b13920",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:29.652529Z",
     "iopub.status.busy": "2024-04-28T20:36:29.652164Z",
     "iopub.status.idle": "2024-04-28T20:36:30.314999Z",
     "shell.execute_reply": "2024-04-28T20:36:30.313840Z"
    },
    "papermill": {
     "duration": 0.680293,
     "end_time": "2024-04-28T20:36:30.317424",
     "exception": false,
     "start_time": "2024-04-28T20:36:29.637131",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pass_boxplot = \\\n",
    "    sns.boxplot(data=pbp_py_p,\n",
    "                   x=\"pass_length_air_yards\",\n",
    "                   y=\"passing_yards\");\n",
    "pass_boxplot.set(\n",
    "    xlabel=\"Pass length (long >=20, yards, short < 20 yards)\",\n",
    "    ylabel=\"Yards gained (or lost) during a passing play\",);\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "35872c88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:30.349522Z",
     "iopub.status.busy": "2024-04-28T20:36:30.349150Z",
     "iopub.status.idle": "2024-04-28T20:36:30.385348Z",
     "shell.execute_reply": "2024-04-28T20:36:30.384173Z"
    },
    "papermill": {
     "duration": 0.05571,
     "end_time": "2024-04-28T20:36:30.387908",
     "exception": false,
     "start_time": "2024-04-28T20:36:30.332198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s =\\\n",
    "    pbp_py_p\\\n",
    "    .groupby(['passer_id', 'passer', 'season'])\\\n",
    "    .agg({'passing_yards': ['mean', 'count']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "27850302",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:30.421926Z",
     "iopub.status.busy": "2024-04-28T20:36:30.421358Z",
     "iopub.status.idle": "2024-04-28T20:36:30.436292Z",
     "shell.execute_reply": "2024-04-28T20:36:30.435017Z"
    },
    "papermill": {
     "duration": 0.035335,
     "end_time": "2024-04-28T20:36:30.439022",
     "exception": false,
     "start_time": "2024-04-28T20:36:30.403687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.describe of                             passing_yards      \n",
       "                                     mean count\n",
       "passer_id  passer    season                    \n",
       "00-0019596 T.Brady   2016        8.201049   572\n",
       "                     2017        7.951253   718\n",
       "                     2018        7.659451   693\n",
       "                     2019        6.563077   650\n",
       "                     2020        7.653226   744\n",
       "...                                   ...   ...\n",
       "00-0037834 B.Purdy   2022        8.339056   233\n",
       "00-0038102 K.Pickett 2022        6.195876   388\n",
       "00-0038108 B.Zappe   2022        8.489130    92\n",
       "00-0038122 D.Ridder  2022        6.156522   115\n",
       "00-0038128 M.Willis  2022        4.524590    61\n",
       "\n",
       "[738 rows x 2 columns]>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s.describe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cb577d87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:30.472590Z",
     "iopub.status.busy": "2024-04-28T20:36:30.472225Z",
     "iopub.status.idle": "2024-04-28T20:36:30.477609Z",
     "shell.execute_reply": "2024-04-28T20:36:30.476256Z"
    },
    "papermill": {
     "duration": 0.025586,
     "end_time": "2024-04-28T20:36:30.480689",
     "exception": false,
     "start_time": "2024-04-28T20:36:30.455103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s.columns = list(map(\"_\".join, pbp_py_p_s.columns.values))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "209c790a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:30.579368Z",
     "iopub.status.busy": "2024-04-28T20:36:30.578660Z",
     "iopub.status.idle": "2024-04-28T20:36:30.585995Z",
     "shell.execute_reply": "2024-04-28T20:36:30.584972Z"
    },
    "papermill": {
     "duration": 0.092065,
     "end_time": "2024-04-28T20:36:30.588131",
     "exception": false,
     "start_time": "2024-04-28T20:36:30.496066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['passing_yards_mean', 'passing_yards_count'], dtype='object')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1c3ce86e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:30.622305Z",
     "iopub.status.busy": "2024-04-28T20:36:30.620933Z",
     "iopub.status.idle": "2024-04-28T20:36:30.628054Z",
     "shell.execute_reply": "2024-04-28T20:36:30.626044Z"
    },
    "papermill": {
     "duration": 0.027501,
     "end_time": "2024-04-28T20:36:30.631295",
     "exception": false,
     "start_time": "2024-04-28T20:36:30.603794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s.rename(\\\n",
    "        columns={'passing_yards_mean': 'ypa', \n",
    "                 'passing_yards_count': 'n'},\n",
    "                 inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "bb8456f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:30.665427Z",
     "iopub.status.busy": "2024-04-28T20:36:30.665028Z",
     "iopub.status.idle": "2024-04-28T20:36:30.681987Z",
     "shell.execute_reply": "2024-04-28T20:36:30.681125Z"
    },
    "papermill": {
     "duration": 0.036787,
     "end_time": "2024-04-28T20:36:30.684283",
     "exception": false,
     "start_time": "2024-04-28T20:36:30.647496",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>ypa</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>passer_id</th>\n",
       "      <th>passer</th>\n",
       "      <th>season</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>00-0035544</th>\n",
       "      <th>T.Kennedy</th>\n",
       "      <th>2021</th>\n",
       "      <td>75.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033132</th>\n",
       "      <th>K.Byard</th>\n",
       "      <th>2018</th>\n",
       "      <td>66.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0031235</th>\n",
       "      <th>O.Beckham</th>\n",
       "      <th>2018</th>\n",
       "      <td>53.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0030669</th>\n",
       "      <th>A.Wilson</th>\n",
       "      <th>2018</th>\n",
       "      <td>52.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0029632</th>\n",
       "      <th>M.Sanu</th>\n",
       "      <th>2017</th>\n",
       "      <td>51.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              ypa  n\n",
       "passer_id  passer    season         \n",
       "00-0035544 T.Kennedy 2021    75.0  1\n",
       "00-0033132 K.Byard   2018    66.0  1\n",
       "00-0031235 O.Beckham 2018    53.0  2\n",
       "00-0030669 A.Wilson  2018    52.0  1\n",
       "00-0029632 M.Sanu    2017    51.0  1"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s\\\n",
    "    .sort_values(by=['ypa'], ascending=False)\\\n",
    "    .head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "53f12455",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:30.716688Z",
     "iopub.status.busy": "2024-04-28T20:36:30.715999Z",
     "iopub.status.idle": "2024-04-28T20:36:30.725338Z",
     "shell.execute_reply": "2024-04-28T20:36:30.724440Z"
    },
    "papermill": {
     "duration": 0.028758,
     "end_time": "2024-04-28T20:36:30.727845",
     "exception": false,
     "start_time": "2024-04-28T20:36:30.699087",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s_100 = \\\n",
    "    pbp_py_p_s\\\n",
    "    .query(\"n >=100\")\\\n",
    "    .sort_values(by=['ypa'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7db97820",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:30.760942Z",
     "iopub.status.busy": "2024-04-28T20:36:30.760294Z",
     "iopub.status.idle": "2024-04-28T20:36:30.776001Z",
     "shell.execute_reply": "2024-04-28T20:36:30.774693Z"
    },
    "papermill": {
     "duration": 0.035927,
     "end_time": "2024-04-28T20:36:30.778743",
     "exception": false,
     "start_time": "2024-04-28T20:36:30.742816",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>ypa</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>passer_id</th>\n",
       "      <th>passer</th>\n",
       "      <th>season</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>00-0023682</th>\n",
       "      <th>R.Fitzpatrick</th>\n",
       "      <th>2018</th>\n",
       "      <td>9.617887</td>\n",
       "      <td>246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0026143</th>\n",
       "      <th>M.Ryan</th>\n",
       "      <th>2016</th>\n",
       "      <td>9.442155</td>\n",
       "      <td>631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0029701</th>\n",
       "      <th>R.Tannehill</th>\n",
       "      <th>2019</th>\n",
       "      <td>9.069971</td>\n",
       "      <td>343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033537</th>\n",
       "      <th>D.Watson</th>\n",
       "      <th>2020</th>\n",
       "      <td>8.898524</td>\n",
       "      <td>542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0036212</th>\n",
       "      <th>T.Tagovailoa</th>\n",
       "      <th>2022</th>\n",
       "      <td>8.892231</td>\n",
       "      <td>399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0031345</th>\n",
       "      <th>J.Garoppolo</th>\n",
       "      <th>2017</th>\n",
       "      <td>8.863636</td>\n",
       "      <td>176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033873</th>\n",
       "      <th>P.Mahomes</th>\n",
       "      <th>2018</th>\n",
       "      <td>8.709678</td>\n",
       "      <td>651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0036442</th>\n",
       "      <th>J.Burrow</th>\n",
       "      <th>2021</th>\n",
       "      <td>8.673748</td>\n",
       "      <td>659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0026498</th>\n",
       "      <th>M.Stafford</th>\n",
       "      <th>2019</th>\n",
       "      <td>8.647058</td>\n",
       "      <td>289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0031345</th>\n",
       "      <th>J.Garoppolo</th>\n",
       "      <th>2021</th>\n",
       "      <td>8.502935</td>\n",
       "      <td>511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033319</th>\n",
       "      <th>N.Mullens</th>\n",
       "      <th>2018</th>\n",
       "      <td>8.433333</td>\n",
       "      <td>270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033537</th>\n",
       "      <th>D.Watson</th>\n",
       "      <th>2017</th>\n",
       "      <td>8.410892</td>\n",
       "      <td>202</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033077</th>\n",
       "      <th>D.Prescott</th>\n",
       "      <th>2020</th>\n",
       "      <td>8.398190</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0034869</th>\n",
       "      <th>S.Darnold</th>\n",
       "      <th>2022</th>\n",
       "      <td>8.343065</td>\n",
       "      <td>137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0037834</th>\n",
       "      <th>B.Purdy</th>\n",
       "      <th>2022</th>\n",
       "      <td>8.339056</td>\n",
       "      <td>233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0029604</th>\n",
       "      <th>K.Cousins</th>\n",
       "      <th>2020</th>\n",
       "      <td>8.313840</td>\n",
       "      <td>513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0031345</th>\n",
       "      <th>J.Garoppolo</th>\n",
       "      <th>2019</th>\n",
       "      <td>8.280075</td>\n",
       "      <td>532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0025708</th>\n",
       "      <th>M.Moore</th>\n",
       "      <th>2016</th>\n",
       "      <td>8.278688</td>\n",
       "      <td>122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0033873</th>\n",
       "      <th>P.Mahomes</th>\n",
       "      <th>2019</th>\n",
       "      <td>8.275167</td>\n",
       "      <td>596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00-0020531</th>\n",
       "      <th>D.Brees</th>\n",
       "      <th>2017</th>\n",
       "      <td>8.257425</td>\n",
       "      <td>606</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      ypa    n\n",
       "passer_id  passer        season               \n",
       "00-0023682 R.Fitzpatrick 2018    9.617887  246\n",
       "00-0026143 M.Ryan        2016    9.442155  631\n",
       "00-0029701 R.Tannehill   2019    9.069971  343\n",
       "00-0033537 D.Watson      2020    8.898524  542\n",
       "00-0036212 T.Tagovailoa  2022    8.892231  399\n",
       "00-0031345 J.Garoppolo   2017    8.863636  176\n",
       "00-0033873 P.Mahomes     2018    8.709678  651\n",
       "00-0036442 J.Burrow      2021    8.673748  659\n",
       "00-0026498 M.Stafford    2019    8.647058  289\n",
       "00-0031345 J.Garoppolo   2021    8.502935  511\n",
       "00-0033319 N.Mullens     2018    8.433333  270\n",
       "00-0033537 D.Watson      2017    8.410892  202\n",
       "00-0033077 D.Prescott    2020    8.398190  221\n",
       "00-0034869 S.Darnold     2022    8.343065  137\n",
       "00-0037834 B.Purdy       2022    8.339056  233\n",
       "00-0029604 K.Cousins     2020    8.313840  513\n",
       "00-0031345 J.Garoppolo   2019    8.280075  532\n",
       "00-0025708 M.Moore       2016    8.278688  122\n",
       "00-0033873 P.Mahomes     2019    8.275167  596\n",
       "00-0020531 D.Brees       2017    8.257425  606"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s_100.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "dda13a3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:30.810968Z",
     "iopub.status.busy": "2024-04-28T20:36:30.810496Z",
     "iopub.status.idle": "2024-04-28T20:36:30.972809Z",
     "shell.execute_reply": "2024-04-28T20:36:30.971487Z"
    },
    "papermill": {
     "duration": 0.181272,
     "end_time": "2024-04-28T20:36:30.975318",
     "exception": false,
     "start_time": "2024-04-28T20:36:30.794046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>play_id</th>\n",
       "      <th>game_id</th>\n",
       "      <th>old_game_id</th>\n",
       "      <th>home_team</th>\n",
       "      <th>away_team</th>\n",
       "      <th>season_type</th>\n",
       "      <th>week</th>\n",
       "      <th>posteam</th>\n",
       "      <th>posteam_type</th>\n",
       "      <th>...</th>\n",
       "      <th>defense_players</th>\n",
       "      <th>n_offense</th>\n",
       "      <th>n_defense</th>\n",
       "      <th>ngs_air_yards</th>\n",
       "      <th>time_to_throw</th>\n",
       "      <th>was_pressure</th>\n",
       "      <th>route</th>\n",
       "      <th>defense_man_zone_type</th>\n",
       "      <th>defense_coverage_type</th>\n",
       "      <th>pass_length_air_yards</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>85.0</td>\n",
       "      <td>2016_01_BUF_BAL</td>\n",
       "      <td>2016091101</td>\n",
       "      <td>BAL</td>\n",
       "      <td>BUF</td>\n",
       "      <td>REG</td>\n",
       "      <td>1</td>\n",
       "      <td>BAL</td>\n",
       "      <td>home</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0031171;00-0029542;00-0029566;00-0030073;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>-4.530000</td>\n",
       "      <td>2.404</td>\n",
       "      <td>False</td>\n",
       "      <td>FLAT</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>130.0</td>\n",
       "      <td>2016_01_BUF_BAL</td>\n",
       "      <td>2016091101</td>\n",
       "      <td>BAL</td>\n",
       "      <td>BUF</td>\n",
       "      <td>REG</td>\n",
       "      <td>1</td>\n",
       "      <td>BAL</td>\n",
       "      <td>home</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0029542;00-0031171;00-0029566;00-0030073;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.710000</td>\n",
       "      <td>2.093</td>\n",
       "      <td>False</td>\n",
       "      <td>FLAT</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "      <td>216.0</td>\n",
       "      <td>2016_01_BUF_BAL</td>\n",
       "      <td>2016091101</td>\n",
       "      <td>BAL</td>\n",
       "      <td>BUF</td>\n",
       "      <td>REG</td>\n",
       "      <td>1</td>\n",
       "      <td>BUF</td>\n",
       "      <td>away</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0031170;00-0027560;00-0027965;00-0031296;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.610000</td>\n",
       "      <td>2.537</td>\n",
       "      <td>False</td>\n",
       "      <td>ANGLE</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11</td>\n",
       "      <td>261.0</td>\n",
       "      <td>2016_01_BUF_BAL</td>\n",
       "      <td>2016091101</td>\n",
       "      <td>BAL</td>\n",
       "      <td>BUF</td>\n",
       "      <td>REG</td>\n",
       "      <td>1</td>\n",
       "      <td>BUF</td>\n",
       "      <td>away</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0031170;00-0027560;00-0027965;00-0031296;00...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>-3.460000</td>\n",
       "      <td>2.265</td>\n",
       "      <td>False</td>\n",
       "      <td>SCREEN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13</td>\n",
       "      <td>310.0</td>\n",
       "      <td>2016_01_BUF_BAL</td>\n",
       "      <td>2016091101</td>\n",
       "      <td>BAL</td>\n",
       "      <td>BUF</td>\n",
       "      <td>REG</td>\n",
       "      <td>1</td>\n",
       "      <td>BAL</td>\n",
       "      <td>home</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0029542;00-0031171;00-0029566;00-0030073;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>3.560000</td>\n",
       "      <td>1.921</td>\n",
       "      <td>False</td>\n",
       "      <td>FLAT</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131601</th>\n",
       "      <td>336300</td>\n",
       "      <td>3635.0</td>\n",
       "      <td>2022_22_KC_PHI</td>\n",
       "      <td>2023021200</td>\n",
       "      <td>PHI</td>\n",
       "      <td>KC</td>\n",
       "      <td>POST</td>\n",
       "      <td>22</td>\n",
       "      <td>PHI</td>\n",
       "      <td>home</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0034818;00-0036374;00-0027662;00-0035625;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>38.220001</td>\n",
       "      <td>3.070</td>\n",
       "      <td>False</td>\n",
       "      <td>GO</td>\n",
       "      <td>ZONE_COVERAGE</td>\n",
       "      <td>COVER_3</td>\n",
       "      <td>long</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131602</th>\n",
       "      <td>336305</td>\n",
       "      <td>3736.0</td>\n",
       "      <td>2022_22_KC_PHI</td>\n",
       "      <td>2023021200</td>\n",
       "      <td>PHI</td>\n",
       "      <td>KC</td>\n",
       "      <td>POST</td>\n",
       "      <td>22</td>\n",
       "      <td>KC</td>\n",
       "      <td>away</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0035386;00-0034993;00-0034375;00-0029653;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>4.630000</td>\n",
       "      <td>2.702</td>\n",
       "      <td>False</td>\n",
       "      <td>OUT</td>\n",
       "      <td>ZONE_COVERAGE</td>\n",
       "      <td>COVER_3</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131603</th>\n",
       "      <td>336307</td>\n",
       "      <td>3789.0</td>\n",
       "      <td>2022_22_KC_PHI</td>\n",
       "      <td>2023021200</td>\n",
       "      <td>PHI</td>\n",
       "      <td>KC</td>\n",
       "      <td>POST</td>\n",
       "      <td>22</td>\n",
       "      <td>KC</td>\n",
       "      <td>away</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0035386;00-0034993;00-0034375;00-0029653;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>4.240000</td>\n",
       "      <td>1.368</td>\n",
       "      <td>False</td>\n",
       "      <td>HITCH</td>\n",
       "      <td>MAN_COVERAGE</td>\n",
       "      <td>COVER_1</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131604</th>\n",
       "      <td>336311</td>\n",
       "      <td>3876.0</td>\n",
       "      <td>2022_22_KC_PHI</td>\n",
       "      <td>2023021200</td>\n",
       "      <td>PHI</td>\n",
       "      <td>KC</td>\n",
       "      <td>POST</td>\n",
       "      <td>22</td>\n",
       "      <td>KC</td>\n",
       "      <td>away</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0035386;00-0034993;00-0034375;00-0029653;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>-4.730000</td>\n",
       "      <td>1.835</td>\n",
       "      <td>True</td>\n",
       "      <td>SCREEN</td>\n",
       "      <td>MAN_COVERAGE</td>\n",
       "      <td>COVER_1</td>\n",
       "      <td>short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131605</th>\n",
       "      <td>336322</td>\n",
       "      <td>4072.0</td>\n",
       "      <td>2022_22_KC_PHI</td>\n",
       "      <td>2023021200</td>\n",
       "      <td>PHI</td>\n",
       "      <td>KC</td>\n",
       "      <td>POST</td>\n",
       "      <td>22</td>\n",
       "      <td>PHI</td>\n",
       "      <td>home</td>\n",
       "      <td>...</td>\n",
       "      <td>00-0036374;00-0035157;00-0035625;00-0037819;00...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.073</td>\n",
       "      <td>False</td>\n",
       "      <td>None</td>\n",
       "      <td>ZONE_COVERAGE</td>\n",
       "      <td>PREVENT</td>\n",
       "      <td>long</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>131606 rows × 392 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         index  play_id          game_id old_game_id home_team away_team  \\\n",
       "0            3     85.0  2016_01_BUF_BAL  2016091101       BAL       BUF   \n",
       "1            5    130.0  2016_01_BUF_BAL  2016091101       BAL       BUF   \n",
       "2            9    216.0  2016_01_BUF_BAL  2016091101       BAL       BUF   \n",
       "3           11    261.0  2016_01_BUF_BAL  2016091101       BAL       BUF   \n",
       "4           13    310.0  2016_01_BUF_BAL  2016091101       BAL       BUF   \n",
       "...        ...      ...              ...         ...       ...       ...   \n",
       "131601  336300   3635.0   2022_22_KC_PHI  2023021200       PHI        KC   \n",
       "131602  336305   3736.0   2022_22_KC_PHI  2023021200       PHI        KC   \n",
       "131603  336307   3789.0   2022_22_KC_PHI  2023021200       PHI        KC   \n",
       "131604  336311   3876.0   2022_22_KC_PHI  2023021200       PHI        KC   \n",
       "131605  336322   4072.0   2022_22_KC_PHI  2023021200       PHI        KC   \n",
       "\n",
       "       season_type  week posteam posteam_type  ...  \\\n",
       "0              REG     1     BAL         home  ...   \n",
       "1              REG     1     BAL         home  ...   \n",
       "2              REG     1     BUF         away  ...   \n",
       "3              REG     1     BUF         away  ...   \n",
       "4              REG     1     BAL         home  ...   \n",
       "...            ...   ...     ...          ...  ...   \n",
       "131601        POST    22     PHI         home  ...   \n",
       "131602        POST    22      KC         away  ...   \n",
       "131603        POST    22      KC         away  ...   \n",
       "131604        POST    22      KC         away  ...   \n",
       "131605        POST    22     PHI         home  ...   \n",
       "\n",
       "                                          defense_players n_offense  \\\n",
       "0       00-0031171;00-0029542;00-0029566;00-0030073;00...      11.0   \n",
       "1       00-0029542;00-0031171;00-0029566;00-0030073;00...      11.0   \n",
       "2       00-0031170;00-0027560;00-0027965;00-0031296;00...      11.0   \n",
       "3       00-0031170;00-0027560;00-0027965;00-0031296;00...      10.0   \n",
       "4       00-0029542;00-0031171;00-0029566;00-0030073;00...      11.0   \n",
       "...                                                   ...       ...   \n",
       "131601  00-0034818;00-0036374;00-0027662;00-0035625;00...      11.0   \n",
       "131602  00-0035386;00-0034993;00-0034375;00-0029653;00...      11.0   \n",
       "131603  00-0035386;00-0034993;00-0034375;00-0029653;00...      11.0   \n",
       "131604  00-0035386;00-0034993;00-0034375;00-0029653;00...      11.0   \n",
       "131605  00-0036374;00-0035157;00-0035625;00-0037819;00...      11.0   \n",
       "\n",
       "        n_defense ngs_air_yards  time_to_throw  was_pressure   route  \\\n",
       "0            11.0     -4.530000          2.404         False    FLAT   \n",
       "1            11.0      1.710000          2.093         False    FLAT   \n",
       "2            10.0      1.610000          2.537         False   ANGLE   \n",
       "3            10.0     -3.460000          2.265         False  SCREEN   \n",
       "4            11.0      3.560000          1.921         False    FLAT   \n",
       "...           ...           ...            ...           ...     ...   \n",
       "131601       11.0     38.220001          3.070         False      GO   \n",
       "131602       11.0      4.630000          2.702         False     OUT   \n",
       "131603       11.0      4.240000          1.368         False   HITCH   \n",
       "131604       11.0     -4.730000          1.835          True  SCREEN   \n",
       "131605       11.0           NaN          6.073         False    None   \n",
       "\n",
       "       defense_man_zone_type  defense_coverage_type  pass_length_air_yards  \n",
       "0                       None                   None                  short  \n",
       "1                       None                   None                  short  \n",
       "2                       None                   None                  short  \n",
       "3                       None                   None                  short  \n",
       "4                       None                   None                  short  \n",
       "...                      ...                    ...                    ...  \n",
       "131601         ZONE_COVERAGE                COVER_3                   long  \n",
       "131602         ZONE_COVERAGE                COVER_3                  short  \n",
       "131603          MAN_COVERAGE                COVER_1                  short  \n",
       "131604          MAN_COVERAGE                COVER_1                  short  \n",
       "131605         ZONE_COVERAGE                PREVENT                   long  \n",
       "\n",
       "[131606 rows x 392 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "21595ebb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.008214Z",
     "iopub.status.busy": "2024-04-28T20:36:31.007718Z",
     "iopub.status.idle": "2024-04-28T20:36:31.053387Z",
     "shell.execute_reply": "2024-04-28T20:36:31.051952Z"
    },
    "papermill": {
     "duration": 0.065258,
     "end_time": "2024-04-28T20:36:31.056021",
     "exception": false,
     "start_time": "2024-04-28T20:36:30.990763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s_pl =pbp_py_p\\\n",
    "    .groupby(['passer_id', 'passer',\n",
    "              'season', 'pass_length_air_yards'])\\\n",
    "    .agg({'passing_yards': ['mean', 'count']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a9cb5c38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.091575Z",
     "iopub.status.busy": "2024-04-28T20:36:31.091208Z",
     "iopub.status.idle": "2024-04-28T20:36:31.108380Z",
     "shell.execute_reply": "2024-04-28T20:36:31.107106Z"
    },
    "papermill": {
     "duration": 0.037656,
     "end_time": "2024-04-28T20:36:31.111094",
     "exception": false,
     "start_time": "2024-04-28T20:36:31.073438",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">passing_yards</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>passer_id</th>\n",
       "      <th>passer</th>\n",
       "      <th>season</th>\n",
       "      <th>pass_length_air_yards</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"14\" valign=\"top\">00-0019596</th>\n",
       "      <th rowspan=\"14\" valign=\"top\">T.Brady</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">2016</th>\n",
       "      <th>long</th>\n",
       "      <td>15.768116</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>7.163022</td>\n",
       "      <td>503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2017</th>\n",
       "      <th>long</th>\n",
       "      <td>13.264706</td>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>7.071429</td>\n",
       "      <td>616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2018</th>\n",
       "      <th>long</th>\n",
       "      <td>10.232877</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>7.356452</td>\n",
       "      <td>620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2019</th>\n",
       "      <th>long</th>\n",
       "      <td>10.828571</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>6.048276</td>\n",
       "      <td>580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2020</th>\n",
       "      <th>long</th>\n",
       "      <td>12.252101</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>6.777600</td>\n",
       "      <td>625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2021</th>\n",
       "      <th>long</th>\n",
       "      <td>12.242424</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>6.634697</td>\n",
       "      <td>709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2022</th>\n",
       "      <th>long</th>\n",
       "      <td>10.802469</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>5.832168</td>\n",
       "      <td>715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">00-0020531</th>\n",
       "      <th rowspan=\"6\" valign=\"top\">D.Brees</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">2016</th>\n",
       "      <th>long</th>\n",
       "      <td>18.142857</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>6.631313</td>\n",
       "      <td>594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2017</th>\n",
       "      <th>long</th>\n",
       "      <td>16.632353</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>7.198885</td>\n",
       "      <td>538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2018</th>\n",
       "      <th>long</th>\n",
       "      <td>14.903226</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>short</th>\n",
       "      <td>7.178571</td>\n",
       "      <td>504</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                passing_yards      \n",
       "                                                         mean count\n",
       "passer_id  passer  season pass_length_air_yards                    \n",
       "00-0019596 T.Brady 2016   long                      15.768116    69\n",
       "                          short                      7.163022   503\n",
       "                   2017   long                      13.264706   102\n",
       "                          short                      7.071429   616\n",
       "                   2018   long                      10.232877    73\n",
       "                          short                      7.356452   620\n",
       "                   2019   long                      10.828571    70\n",
       "                          short                      6.048276   580\n",
       "                   2020   long                      12.252101   119\n",
       "                          short                      6.777600   625\n",
       "                   2021   long                      12.242424    99\n",
       "                          short                      6.634697   709\n",
       "                   2022   long                      10.802469    81\n",
       "                          short                      5.832168   715\n",
       "00-0020531 D.Brees 2016   long                      18.142857    70\n",
       "                          short                      6.631313   594\n",
       "                   2017   long                      16.632353    68\n",
       "                          short                      7.198885   538\n",
       "                   2018   long                      14.903226    62\n",
       "                          short                      7.178571   504"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s_pl.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "26fbbb43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.147042Z",
     "iopub.status.busy": "2024-04-28T20:36:31.146562Z",
     "iopub.status.idle": "2024-04-28T20:36:31.156790Z",
     "shell.execute_reply": "2024-04-28T20:36:31.155507Z"
    },
    "papermill": {
     "duration": 0.030579,
     "end_time": "2024-04-28T20:36:31.159507",
     "exception": false,
     "start_time": "2024-04-28T20:36:31.128928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s_pl.columns =\\\n",
    "    list(map(\"_\".join, pbp_py_p_s_pl.columns.values))\n",
    "pbp_py_p_s_pl\\\n",
    "    .rename(columns={'passing_yards_mean': 'ypa',\n",
    "                     'passing_yards_count': 'n'},\n",
    "                     inplace=True)\n",
    "pbp_py_p_s_pl.reset_index(inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "de5aed3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.194270Z",
     "iopub.status.busy": "2024-04-28T20:36:31.193434Z",
     "iopub.status.idle": "2024-04-28T20:36:31.205992Z",
     "shell.execute_reply": "2024-04-28T20:36:31.204323Z"
    },
    "papermill": {
     "duration": 0.03318,
     "end_time": "2024-04-28T20:36:31.208821",
     "exception": false,
     "start_time": "2024-04-28T20:36:31.175641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "q_value=(\n",
    "    '(n >= 100 & ' +\n",
    "     'pass_length_air_yards == \"short\") | ' +\n",
    "    '(n >= 30 & ' +\n",
    "    'pass_length_air_yards == \"long\")'\n",
    " )\n",
    "pbp_py_p_s_pl = pbp_py_p_s_pl.query(q_value).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0bb119b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.244975Z",
     "iopub.status.busy": "2024-04-28T20:36:31.244174Z",
     "iopub.status.idle": "2024-04-28T20:36:31.250559Z",
     "shell.execute_reply": "2024-04-28T20:36:31.249298Z"
    },
    "papermill": {
     "duration": 0.02737,
     "end_time": "2024-04-28T20:36:31.254039",
     "exception": false,
     "start_time": "2024-04-28T20:36:31.226669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "col_save =\\\n",
    "    ['passer_id', 'passer', 'season', 'pass_length_air_yards', 'ypa']\n",
    "air_yards_py=\\\n",
    "    pbp_py_p_s_pl[col_save].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "5e99ae9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.292095Z",
     "iopub.status.busy": "2024-04-28T20:36:31.291341Z",
     "iopub.status.idle": "2024-04-28T20:36:31.304875Z",
     "shell.execute_reply": "2024-04-28T20:36:31.303685Z"
    },
    "papermill": {
     "duration": 0.035238,
     "end_time": "2024-04-28T20:36:31.308278",
     "exception": false,
     "start_time": "2024-04-28T20:36:31.273040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passer_id</th>\n",
       "      <th>passer</th>\n",
       "      <th>season</th>\n",
       "      <th>pass_length_air_yards</th>\n",
       "      <th>ypa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2016</td>\n",
       "      <td>long</td>\n",
       "      <td>15.768116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2016</td>\n",
       "      <td>short</td>\n",
       "      <td>7.163022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2017</td>\n",
       "      <td>long</td>\n",
       "      <td>13.264706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2017</td>\n",
       "      <td>short</td>\n",
       "      <td>7.071429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2018</td>\n",
       "      <td>long</td>\n",
       "      <td>10.232877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>00-0037327</td>\n",
       "      <td>S.Thompson</td>\n",
       "      <td>2022</td>\n",
       "      <td>short</td>\n",
       "      <td>4.664122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>500</th>\n",
       "      <td>00-0037834</td>\n",
       "      <td>B.Purdy</td>\n",
       "      <td>2022</td>\n",
       "      <td>short</td>\n",
       "      <td>7.720588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>00-0038102</td>\n",
       "      <td>K.Pickett</td>\n",
       "      <td>2022</td>\n",
       "      <td>long</td>\n",
       "      <td>11.325582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>00-0038102</td>\n",
       "      <td>K.Pickett</td>\n",
       "      <td>2022</td>\n",
       "      <td>short</td>\n",
       "      <td>5.556522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>503</th>\n",
       "      <td>00-0038122</td>\n",
       "      <td>D.Ridder</td>\n",
       "      <td>2022</td>\n",
       "      <td>short</td>\n",
       "      <td>6.068627</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>504 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      passer_id      passer  season pass_length_air_yards        ypa\n",
       "0    00-0019596     T.Brady    2016                  long  15.768116\n",
       "1    00-0019596     T.Brady    2016                 short   7.163022\n",
       "2    00-0019596     T.Brady    2017                  long  13.264706\n",
       "3    00-0019596     T.Brady    2017                 short   7.071429\n",
       "4    00-0019596     T.Brady    2018                  long  10.232877\n",
       "..          ...         ...     ...                   ...        ...\n",
       "499  00-0037327  S.Thompson    2022                 short   4.664122\n",
       "500  00-0037834     B.Purdy    2022                 short   7.720588\n",
       "501  00-0038102   K.Pickett    2022                  long  11.325582\n",
       "502  00-0038102   K.Pickett    2022                 short   5.556522\n",
       "503  00-0038122    D.Ridder    2022                 short   6.068627\n",
       "\n",
       "[504 rows x 5 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "air_yards_py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "dc5debc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.344751Z",
     "iopub.status.busy": "2024-04-28T20:36:31.344352Z",
     "iopub.status.idle": "2024-04-28T20:36:31.351284Z",
     "shell.execute_reply": "2024-04-28T20:36:31.350087Z"
    },
    "papermill": {
     "duration": 0.027627,
     "end_time": "2024-04-28T20:36:31.353593",
     "exception": false,
     "start_time": "2024-04-28T20:36:31.325966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "air_yards_lag_py =\\\n",
    "    air_yards_py.copy()\n",
    "air_yards_lag_py['season'] +=1\n",
    "air_yards_lag_py\\\n",
    "    .rename(columns={'ypa': 'ypa_last'},\n",
    "           inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "a906886c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.389053Z",
     "iopub.status.busy": "2024-04-28T20:36:31.388239Z",
     "iopub.status.idle": "2024-04-28T20:36:31.402246Z",
     "shell.execute_reply": "2024-04-28T20:36:31.401052Z"
    },
    "papermill": {
     "duration": 0.034597,
     "end_time": "2024-04-28T20:36:31.405069",
     "exception": false,
     "start_time": "2024-04-28T20:36:31.370472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passer_id</th>\n",
       "      <th>passer</th>\n",
       "      <th>season</th>\n",
       "      <th>pass_length_air_yards</th>\n",
       "      <th>ypa_last</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2017</td>\n",
       "      <td>long</td>\n",
       "      <td>15.768116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2017</td>\n",
       "      <td>short</td>\n",
       "      <td>7.163022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2018</td>\n",
       "      <td>long</td>\n",
       "      <td>13.264706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2018</td>\n",
       "      <td>short</td>\n",
       "      <td>7.071429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>2019</td>\n",
       "      <td>long</td>\n",
       "      <td>10.232877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>00-0037327</td>\n",
       "      <td>S.Thompson</td>\n",
       "      <td>2023</td>\n",
       "      <td>short</td>\n",
       "      <td>4.664122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>500</th>\n",
       "      <td>00-0037834</td>\n",
       "      <td>B.Purdy</td>\n",
       "      <td>2023</td>\n",
       "      <td>short</td>\n",
       "      <td>7.720588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>00-0038102</td>\n",
       "      <td>K.Pickett</td>\n",
       "      <td>2023</td>\n",
       "      <td>long</td>\n",
       "      <td>11.325582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>00-0038102</td>\n",
       "      <td>K.Pickett</td>\n",
       "      <td>2023</td>\n",
       "      <td>short</td>\n",
       "      <td>5.556522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>503</th>\n",
       "      <td>00-0038122</td>\n",
       "      <td>D.Ridder</td>\n",
       "      <td>2023</td>\n",
       "      <td>short</td>\n",
       "      <td>6.068627</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>504 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      passer_id      passer  season pass_length_air_yards   ypa_last\n",
       "0    00-0019596     T.Brady    2017                  long  15.768116\n",
       "1    00-0019596     T.Brady    2017                 short   7.163022\n",
       "2    00-0019596     T.Brady    2018                  long  13.264706\n",
       "3    00-0019596     T.Brady    2018                 short   7.071429\n",
       "4    00-0019596     T.Brady    2019                  long  10.232877\n",
       "..          ...         ...     ...                   ...        ...\n",
       "499  00-0037327  S.Thompson    2023                 short   4.664122\n",
       "500  00-0037834     B.Purdy    2023                 short   7.720588\n",
       "501  00-0038102   K.Pickett    2023                  long  11.325582\n",
       "502  00-0038102   K.Pickett    2023                 short   5.556522\n",
       "503  00-0038122    D.Ridder    2023                 short   6.068627\n",
       "\n",
       "[504 rows x 5 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "air_yards_lag_py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6b55e33b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.443135Z",
     "iopub.status.busy": "2024-04-28T20:36:31.442669Z",
     "iopub.status.idle": "2024-04-28T20:36:31.456338Z",
     "shell.execute_reply": "2024-04-28T20:36:31.455143Z"
    },
    "papermill": {
     "duration": 0.036448,
     "end_time": "2024-04-28T20:36:31.458926",
     "exception": false,
     "start_time": "2024-04-28T20:36:31.422478",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pbp_py_p_s_pl =\\\n",
    "    air_yards_py.merge(air_yards_lag_py,\n",
    "                        how='inner',\n",
    "                          on=['passer_id', 'passer',\n",
    "                            'season', 'pass_length_air_yards'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "fa7ca4d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.499958Z",
     "iopub.status.busy": "2024-04-28T20:36:31.497579Z",
     "iopub.status.idle": "2024-04-28T20:36:31.518345Z",
     "shell.execute_reply": "2024-04-28T20:36:31.517038Z"
    },
    "papermill": {
     "duration": 0.043315,
     "end_time": "2024-04-28T20:36:31.520831",
     "exception": false,
     "start_time": "2024-04-28T20:36:31.477516",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   pass_length_air_yards     passer  season        ypa   ypa_last\n",
      "47                  long  A.Rodgers    2019  12.092592  12.011628\n",
      "49                  long  A.Rodgers    2020  16.097826  12.092592\n",
      "51                  long  A.Rodgers    2021  14.302631  16.097826\n",
      "53                  long  A.Rodgers    2022  10.312500  14.302631\n",
      "45                 short  A.Rodgers    2017   6.041475   6.693523\n",
      "46                 short  A.Rodgers    2018   6.697446   6.041475\n",
      "48                 short  A.Rodgers    2019   6.207224   6.697446\n",
      "50                 short  A.Rodgers    2020   6.718447   6.207224\n",
      "52                 short  A.Rodgers    2021   6.777083   6.718447\n",
      "54                 short  A.Rodgers    2022   6.239130   6.777083\n",
      "0                   long    T.Brady    2017  13.264706  15.768116\n",
      "2                   long    T.Brady    2018  10.232877  13.264706\n",
      "4                   long    T.Brady    2019  10.828571  10.232877\n",
      "6                   long    T.Brady    2020  12.252101  10.828571\n",
      "8                   long    T.Brady    2021  12.242424  12.252101\n",
      "10                  long    T.Brady    2022  10.802469  12.242424\n",
      "1                  short    T.Brady    2017   7.071429   7.163022\n",
      "3                  short    T.Brady    2018   7.356452   7.071429\n",
      "5                  short    T.Brady    2019   6.048276   7.356452\n",
      "7                  short    T.Brady    2020   6.777600   6.048276\n",
      "9                  short    T.Brady    2021   6.634697   6.777600\n",
      "11                 short    T.Brady    2022   5.832168   6.634697\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "    pbp_py_p_s_pl[[\"pass_length_air_yards\", \"passer\",\n",
    "                  \"season\", \"ypa\", \"ypa_last\"]]\\\n",
    "    .query('passer == \"T.Brady\" | passer == \"A.Rodgers\"')\\\n",
    "    .sort_values([\"passer\", \"pass_length_air_yards\", \"season\"])\\\n",
    "    .to_string())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ddb8d74b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.559828Z",
     "iopub.status.busy": "2024-04-28T20:36:31.559442Z",
     "iopub.status.idle": "2024-04-28T20:36:31.575563Z",
     "shell.execute_reply": "2024-04-28T20:36:31.574455Z"
    },
    "papermill": {
     "duration": 0.038649,
     "end_time": "2024-04-28T20:36:31.577873",
     "exception": false,
     "start_time": "2024-04-28T20:36:31.539224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 317 entries, 0 to 316\n",
      "Data columns (total 6 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   passer_id              317 non-null    object \n",
      " 1   passer                 317 non-null    object \n",
      " 2   season                 317 non-null    int64  \n",
      " 3   pass_length_air_yards  317 non-null    object \n",
      " 4   ypa                    317 non-null    float32\n",
      " 5   ypa_last               317 non-null    float32\n",
      "dtypes: float32(2), int64(1), object(3)\n",
      "memory usage: 12.5+ KB\n"
     ]
    }
   ],
   "source": [
    "pbp_py_p_s_pl.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "54367b65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.615679Z",
     "iopub.status.busy": "2024-04-28T20:36:31.615096Z",
     "iopub.status.idle": "2024-04-28T20:36:31.620964Z",
     "shell.execute_reply": "2024-04-28T20:36:31.619918Z"
    },
    "papermill": {
     "duration": 0.027177,
     "end_time": "2024-04-28T20:36:31.623198",
     "exception": false,
     "start_time": "2024-04-28T20:36:31.596021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "65"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(pbp_py_p_s_pl.passer_id.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "da1aab46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:31.660002Z",
     "iopub.status.busy": "2024-04-28T20:36:31.658969Z",
     "iopub.status.idle": "2024-04-28T20:36:33.263344Z",
     "shell.execute_reply": "2024-04-28T20:36:33.262236Z"
    },
    "papermill": {
     "duration": 1.625991,
     "end_time": "2024-04-28T20:36:33.266435",
     "exception": false,
     "start_time": "2024-04-28T20:36:31.640444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(data=pbp_py_p_s_pl,\n",
    "           x=\"ypa\",\n",
    "           y=\"ypa_last\", \n",
    "           col=\"pass_length_air_yards\");\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "65c1444a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:33.307908Z",
     "iopub.status.busy": "2024-04-28T20:36:33.306807Z",
     "iopub.status.idle": "2024-04-28T20:36:33.328376Z",
     "shell.execute_reply": "2024-04-28T20:36:33.327291Z"
    },
    "papermill": {
     "duration": 0.044418,
     "end_time": "2024-04-28T20:36:33.330764",
     "exception": false,
     "start_time": "2024-04-28T20:36:33.286346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>ypa</th>\n",
       "      <th>ypa_last</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pass_length_air_yards</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">long</th>\n",
       "      <th>ypa</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.234301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ypa_last</th>\n",
       "      <td>0.234301</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">short</th>\n",
       "      <th>ypa</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.438827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ypa_last</th>\n",
       "      <td>0.438827</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     ypa  ypa_last\n",
       "pass_length_air_yards                             \n",
       "long                  ypa       1.000000  0.234301\n",
       "                      ypa_last  0.234301  1.000000\n",
       "short                 ypa       1.000000  0.438827\n",
       "                      ypa_last  0.438827  1.000000"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s_pl\\\n",
    "    .query(\"ypa.notnull() & ypa_last.notnull()\")\\\n",
    "    .groupby(\"pass_length_air_yards\")[[\"ypa\", \"ypa_last\"]]\\\n",
    "    .corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "a43bcda6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:33.373976Z",
     "iopub.status.busy": "2024-04-28T20:36:33.373178Z",
     "iopub.status.idle": "2024-04-28T20:36:33.397473Z",
     "shell.execute_reply": "2024-04-28T20:36:33.396217Z"
    },
    "papermill": {
     "duration": 0.050815,
     "end_time": "2024-04-28T20:36:33.400633",
     "exception": false,
     "start_time": "2024-04-28T20:36:33.349818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passer_id</th>\n",
       "      <th>passer</th>\n",
       "      <th>ypa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>00-0023436</td>\n",
       "      <td>A.Smith</td>\n",
       "      <td>19.338236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>00-0026498</td>\n",
       "      <td>M.Stafford</td>\n",
       "      <td>17.830769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>00-0020531</td>\n",
       "      <td>D.Brees</td>\n",
       "      <td>16.632353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>00-0032950</td>\n",
       "      <td>C.Wentz</td>\n",
       "      <td>13.555555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>00-0022942</td>\n",
       "      <td>P.Rivers</td>\n",
       "      <td>13.347826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00-0019596</td>\n",
       "      <td>T.Brady</td>\n",
       "      <td>13.264706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>00-0029604</td>\n",
       "      <td>K.Cousins</td>\n",
       "      <td>12.847458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>00-0029263</td>\n",
       "      <td>R.Wilson</td>\n",
       "      <td>12.738636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>203</th>\n",
       "      <td>00-0033077</td>\n",
       "      <td>D.Prescott</td>\n",
       "      <td>12.585366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>00-0028986</td>\n",
       "      <td>C.Keenum</td>\n",
       "      <td>11.904762</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      passer_id      passer        ypa\n",
       "41   00-0023436     A.Smith  19.338236\n",
       "79   00-0026498  M.Stafford  17.830769\n",
       "12   00-0020531     D.Brees  16.632353\n",
       "191  00-0032950     C.Wentz  13.555555\n",
       "33   00-0022942    P.Rivers  13.347826\n",
       "0    00-0019596     T.Brady  13.264706\n",
       "129  00-0029604   K.Cousins  12.847458\n",
       "114  00-0029263    R.Wilson  12.738636\n",
       "203  00-0033077  D.Prescott  12.585366\n",
       "109  00-0028986    C.Keenum  11.904762"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s_pl\\\n",
    "    .query(\n",
    "        'pass_length_air_yards == \"long\" & season == 2017')\\\n",
    "        [['passer_id', 'passer', 'ypa']]\\\n",
    "    .sort_values(['ypa'], ascending = False)\\\n",
    "    .head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "64c63eeb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T20:36:33.447732Z",
     "iopub.status.busy": "2024-04-28T20:36:33.447003Z",
     "iopub.status.idle": "2024-04-28T20:36:33.464430Z",
     "shell.execute_reply": "2024-04-28T20:36:33.463559Z"
    },
    "papermill": {
     "duration": 0.040217,
     "end_time": "2024-04-28T20:36:33.466630",
     "exception": false,
     "start_time": "2024-04-28T20:36:33.426413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passer_id</th>\n",
       "      <th>passer</th>\n",
       "      <th>ypa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>00-0029263</td>\n",
       "      <td>R.Wilson</td>\n",
       "      <td>15.597403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>00-0020531</td>\n",
       "      <td>D.Brees</td>\n",
       "      <td>14.903226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>00-0033077</td>\n",
       "      <td>D.Prescott</td>\n",
       "      <td>14.771930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>214</th>\n",
       "      <td>00-0033106</td>\n",
       "      <td>J.Goff</td>\n",
       "      <td>14.445946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>00-0022942</td>\n",
       "      <td>P.Rivers</td>\n",
       "      <td>14.357142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>00-0031280</td>\n",
       "      <td>D.Carr</td>\n",
       "      <td>14.339286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>00-0032268</td>\n",
       "      <td>M.Mariota</td>\n",
       "      <td>13.941176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>00-0026143</td>\n",
       "      <td>M.Ryan</td>\n",
       "      <td>13.465754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>00-0032950</td>\n",
       "      <td>C.Wentz</td>\n",
       "      <td>13.222222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>00-0022803</td>\n",
       "      <td>E.Manning</td>\n",
       "      <td>12.941176</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      passer_id      passer        ypa\n",
       "116  00-0029263    R.Wilson  15.597403\n",
       "14   00-0020531     D.Brees  14.903226\n",
       "205  00-0033077  D.Prescott  14.771930\n",
       "214  00-0033106      J.Goff  14.445946\n",
       "35   00-0022942    P.Rivers  14.357142\n",
       "157  00-0031280      D.Carr  14.339286\n",
       "188  00-0032268   M.Mariota  13.941176\n",
       "64   00-0026143      M.Ryan  13.465754\n",
       "193  00-0032950     C.Wentz  13.222222\n",
       "24   00-0022803   E.Manning  12.941176"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pbp_py_p_s_pl\\\n",
    "    .query(\n",
    "        'pass_length_air_yards == \"long\" & season == 2018')\\\n",
    "        [['passer_id', 'passer', 'ypa']]\\\n",
    "    .sort_values(['ypa'], ascending = False)\\\n",
    "    .head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2140d56f",
   "metadata": {
    "papermill": {
     "duration": 0.018525,
     "end_time": "2024-04-28T20:36:33.503304",
     "exception": false,
     "start_time": "2024-04-28T20:36:33.484779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "7e88f884",
   "metadata": {
    "papermill": {
     "duration": 0.018595,
     "end_time": "2024-04-28T20:36:33.541064",
     "exception": false,
     "start_time": "2024-04-28T20:36:33.522469",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<H2>Exercises</H2>\n",
    "\n",
    "<b>1.</b> Create the same histograms as in \"Histograms\" but for EPA per pass attempt.\n",
    "\n",
    "<b>2.</b> Create the same boxplots as in \"Histograms\" but for EPA per pass attempt.\n",
    "\n",
    "<b>3.</b> Perform the same stability analysis as in “Player-Level Stability of Passing Yards per Attempt”, but for EPA per pass attempt. Do you see the same qualitative results as when you use YPA? Do any players have similar YPA numbers one year to the next but have drastically different EPA per pass attempt numbers across years? Where could this come from?\n",
    "\n",
    "<b>4.</b> One of the reasons that data for long pass attempts is less stable than short pass attempts is that there are fewer of them, which is largely a product of 20 yards being an arbitrary cutoff for long passes (by companies like PFF). Find a cutoff that equally splits the data and perform the same analysis. Do the results stay the same?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b711bfc9",
   "metadata": {
    "papermill": {
     "duration": 0.018669,
     "end_time": "2024-04-28T20:36:33.579137",
     "exception": false,
     "start_time": "2024-04-28T20:36:33.560468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 60.871264,
   "end_time": "2024-04-28T20:36:34.822454",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-28T20:35:33.951190",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
